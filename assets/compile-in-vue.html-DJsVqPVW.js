import{_ as d,c as v,b as n,f as a,d as p,e as t,a as e,r as c,o as m}from"./app-B2I_ZL3S.js";const b={};function g(y,s){const l=c("RouteLink"),r=c("CodeTabs"),o=c("compiler-demo"),k=c("parse-progress");return m(),v("div",null,[s[25]||(s[25]=n("h2",{class:"blog-title"},"Vue 系列（二）：谈谈编译器",-1)),s[26]||(s[26]=n("p",null,[n("img",{src:"http://hh-oss-picture.miyapay.com/box/8932fae91c04d5b9b928ee0671c72254.png",alt:""})],-1)),n("p",null,[s[1]||(s[1]=a("在")),p(l,{to:"/vue/glance-vue.html"},{default:t(()=>s[0]||(s[0]=[a("上一篇文章")])),_:1}),s[2]||(s[2]=a("中，我们对 ")),s[3]||(s[3]=n("code",null,"Vue",-1)),s[4]||(s[4]=a(" 进行了简单地了解，梳理出了如上图所示的流程，在后面的文章中，我们将会以这个流程为主线对 ")),s[5]||(s[5]=n("code",null,"Vue",-1)),s[6]||(s[6]=a(" 进行详细地介绍，本篇我们将介绍 ")),s[7]||(s[7]=n("code",null,"Vue",-1)),s[8]||(s[8]=a(" 中的")),s[9]||(s[9]=n("strong",null,"模板编译器",-1)),s[10]||(s[10]=a("。"))]),s[27]||(s[27]=n("h3",{id:"编译器做了什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#编译器做了什么"},[n("span",null,"编译器做了什么？")])],-1)),s[28]||(s[28]=n("br",null,null,-1)),n("p",null,[s[12]||(s[12]=a("其实在")),p(l,{to:"/vue/glance-vue.html"},{default:t(()=>s[11]||(s[11]=[a("上一篇文章")])),_:1}),s[13]||(s[13]=a("中，我们就提及了编译器，只不过当时介绍的是编译器会把模板代码转换为虚拟DOM，其实只说对了一半。其实，编译器还会对虚拟DOM进行进一步处理，最终会把模板内容编译成渲染函数。"))]),s[29]||(s[29]=n("p",null,[a("下面两段代码其实是等价的，编译器的作用就是把"),n("strong",null,"模板代码"),a("编译为"),n("strong",null,"渲染函数"),a("。")],-1)),p(r,{id:"17",data:[{id:"模板代码"},{id:"渲染函数"}]},{title0:t(({value:i,isActive:u})=>s[14]||(s[14]=[a("模板代码")])),title1:t(({value:i,isActive:u})=>s[15]||(s[15]=[a("渲染函数")])),tab0:t(({value:i,isActive:u})=>s[16]||(s[16]=[n("div",{class:"language-vue line-numbers-mode","data-highlighter":"prismjs","data-ext":"vue","data-title":"vue"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("template")]),n("span",{class:"token punctuation"},">")])]),a(`
`),n("span",{class:"line"},[a("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),n("span",{class:"token punctuation"},">")])]),a(`
`),n("span",{class:"line"},[a("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("p")]),n("span",{class:"token punctuation"},">")]),a("Text1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("p")]),n("span",{class:"token punctuation"},">")])]),a(`
`),n("span",{class:"line"},[a("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("p")]),n("span",{class:"token punctuation"},">")]),a("Text2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("p")]),n("span",{class:"token punctuation"},">")])]),a(`
`),n("span",{class:"line"},[a("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")])]),a(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("template")]),n("span",{class:"token punctuation"},">")])]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:t(({value:i,isActive:u})=>s[17]||(s[17]=[n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" h "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},'"vue"'),n("span",{class:"token punctuation"},";")]),a(`
`),n("span",{class:"line"}),a(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{")]),a(`
`),n("span",{class:"line"},[a("  "),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token function"},"h"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"div"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"h"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"p"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},'"Text1"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token function"},"h"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"p"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},'"Text2"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),a(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),s[30]||(s[30]=n("p",null,[a("下面就是我们实现的一个简单的编译器，可以在第一个文本框中输入 "),n("code",null,"<div><p>Text1</p><p>Text2</p></div>"),a("，然后点击 "),n("code",null,"Compile"),a(" 按钮，可以看到转换后的渲染函数的代码与我们上面提供的一样。注：该编译器只支持简单的DOM，暂不支持属性。")],-1)),p(o),s[31]||(s[31]=e(`<h3 id="gpl-和-dsl" tabindex="-1"><a class="header-anchor" href="#gpl-和-dsl"><span>GPL 和 DSL</span></a></h3><br><p>在具体介绍编译器之前，我们得先了解两个概念：<strong>GPL</strong> 和 <strong>DSL</strong>：</p><ul><li><strong>GPL（General Purpose Language）：通用途语言</strong></li></ul><p>指被设计为各种应用领域服务的编程语言。通用途语言不含有为特定应用领域设计的结构，比如：<code>Java</code>、<code>JavaScript</code>、<code>Scala</code> 等等。</p><ul><li><strong>DSL（Domain Specific Language）：领域特定语言</strong></li></ul><p>专为特定领域所设计的语言，表达能力不如 <code>GPL</code>。（用表达能力上的妥协换取某一领域内的高效），比如：<code>JSON</code>、<code>SQL</code>、<code>HTML</code>、<code>CSS</code> 等等。<code>Vue</code> 的模板也是一种 <code>DSL</code>。</p><h3 id="什么是编译器" tabindex="-1"><a class="header-anchor" href="#什么是编译器"><span>什么是编译器？</span></a></h3><br><p><img src="http://hh-oss-picture.miyapay.com/box/c29e0231fff43898ee9574e2fe99d6de.png" alt=""></p><p>上图展示了一个完整的编译流程，源代码（source code）通过编译器（compiler）处理之后，最终生成目标代码（target code）。编译器的编译过程通常为如下几个步骤：词法（lexical）分析、语法（syntax）分析、语义（semantic）分析、生成中间代码（intermediate code）、优化（optimized）、目标代码生成器处理，最终生成目标代码（target code）。</p><p>我们要实现 <code>Vue</code> 模板的编译器，就可以参考上面的流程：</p><p><img src="http://hh-oss-picture.miyapay.com/box/274352efb9877102d1ac940a724d7982.png" alt=""></p><p>可以看到，我们所要实现编译器的流程与上面有一些不同。我们的源代码为前文提到过的 <code>Vue</code> 模板代码，目标代码为可以在浏览器或其他平台能运行的 <code>JavaScript</code> 代码。在编译的过程中，我们首先通过 <code>parse</code> 生成 <code>tpl AST</code>，然后通过 <code>transform</code> 生成 <code>js AST</code>，最后通过 <code>generate</code> 生成目标代码，也就是渲染函数。</p><p>那么根据上面的流程，我们可以先写出如下代码：</p><details class="hint-container details"><summary>编译器伪代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">compiler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// parse template to template AST</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> tplAst <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// transform template AST to JavaScript AST</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> jsAst <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span>tplAst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// generate render code</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>jsAst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> render<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>通过前面的介绍，我们知道其实<strong>编译器就是一段程序，这段程序的作用就是将一种语言翻译成另一种语言。</strong> 简单说来就是字符串的转换[狗头保命]。</p><p>接下来我们将一步一步实现上面代码中所定义的方法，最终完成一个简单的编译器。</p><h3 id="解析器" tabindex="-1"><a class="header-anchor" href="#解析器"><span>解析器</span></a></h3><br><p>通过上面的介绍，我们可以知道，模板编译的第一步就是将模板代码解析为<strong>模板AST</strong>，如下图所示：</p><p><img src="http://hh-oss-picture.miyapay.com/box/01a08ec87a1c6d46faeb594d70efcf2f.png" alt=""></p><h4 id="模板-ast" tabindex="-1"><a class="header-anchor" href="#模板-ast"><span>模板 AST</span></a></h4><br><p><code>AST</code> 就是 Abstract Syntax Tree，抽象语法树。模板AST就是用来描述模板的抽象语法树，举个例子：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Text1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Text2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就是一段模板代码，这段代码会被编译为如下AST：</p><details class="hint-container details"><summary>模板 AST</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ROOT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// root node</span></span>
<span class="line">  <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ELEMENT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// tag/element node</span></span>
<span class="line">      <span class="token string-property property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ELEMENT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// tag/element node</span></span>
<span class="line">          <span class="token string-property property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">              <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// text node</span></span>
<span class="line">              <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Text1&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ELEMENT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// tag/element node</span></span>
<span class="line">          <span class="token string-property property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span></span>
<span class="line">          <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">              <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// text node</span></span>
<span class="line">              <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Text2&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>可以看到模板代码与模板AST的结构其实是一样的，都为树形结构，如下图所示：</p><p><img src="http://hh-oss-picture.miyapay.com/box/809aaba0ad9e45da95d13d22dbc10931.png" alt=""></p>`,30)),n("p",null,[s[19]||(s[19]=a("那么解析器的作用就是将模板代码解析为上面的 ")),s[20]||(s[20]=n("code",null,"JavaScript",-1)),s[21]||(s[21]=a(" 对象，也就是")),p(l,{to:"/vue/glance-vue.html"},{default:t(()=>s[18]||(s[18]=[a("上一篇文章")])),_:1}),s[22]||(s[22]=a("中所提到的 ")),s[23]||(s[23]=n("code",null,"虚拟DOM",-1)),s[24]||(s[24]=a("。那么我们将从何处入手来进行模板的解析呢？"))]),s[32]||(s[32]=e(`<h4 id="从-html-解析中找点灵感" tabindex="-1"><a class="header-anchor" href="#从-html-解析中找点灵感"><span>从 HTML 解析中找点灵感</span></a></h4><br><p>我们知道，解析器的入参其实是<strong>字符串模板</strong>，解析器会逐个读取字符串模板的中的字符，然后将这些字符分割为一个一个的 <code>token</code>，<code>token</code> 可以理解为<strong>词法记号</strong>，以上面为例，解析器会将上面的模板代码分割为：<code>div&gt;</code>、<code>&lt;p&gt;</code>、<code>Text1</code>······，那么解析器的这样去分割的依据是什么，其实就是通过切换一个一个的状态，不同的状态下对应不同的分割规则，那我们该如何确定这些状态呢？</p><p>我们知道 <code>Vue</code> 的模板其实是类似 <code>HTML</code> 的，而浏览器其实是会对 <code>HTML</code> 文本进行解析的，那么它是如何做的呢？ 我们可以从<a href="https://html.spec.whatwg.org/#toc-syntax" target="_blank" rel="noopener noreferrer">WHATWG</a>获得一些灵感。</p><p>WHATWG(Web Hypertext Application Technology Working Group)：网页超文本应用技术工作小组，在该网站中定义了 <code>HTML</code> 的解析规范。这里我们不详细介绍这些规范和方法，因为要解析完整的 <code>HTML</code> 文本是比较复杂的。通过阅读该规范，我们发现 <code>HTML</code> 解析器在解析不同标签的时候会切换不同的文本模式（这里的模式就是状态）：</p><ul><li><strong>在解析一般的标签时，比如：<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>，会进入 <a href="https://html.spec.whatwg.org/#data-state" target="_blank" rel="noopener noreferrer">DATA</a> 模式</strong></li></ul><p>该模式下解析器会解析标签元素</p><ul><li><strong>当遇到 <code>&lt;textarea&gt;</code>、<code>&lt;title&gt;</code>，会进入 <a href="https://html.spec.whatwg.org/#rcdata-state" target="_blank" rel="noopener noreferrer">RCDATA</a> 模式</strong></li></ul><p>该模式下无法识别标签元素，标签元素会被解析成文本，比如我们上面给出的编译器demo，就是通过文本框来实现，在文本框中我们输入的标签都会被解析成文本</p><ul><li><strong>当遇到 <code>&lt;style&gt;</code>、<code>&lt;iframe&gt;</code> 等标签时，会进入 <a href="https://html.spec.whatwg.org/#rawtext-state" target="_blank" rel="noopener noreferrer">RAWTEXT</a> 模式</strong></li></ul><p>该模式下，所有的字符都会被解析成文本。</p><h4 id="有限状态自动机" tabindex="-1"><a class="header-anchor" href="#有限状态自动机"><span>有限状态自动机</span></a></h4><br><p>通过前面的介绍，我们知道解析器在解析标签时，就是通过切换不同的状态来选择相应的规则，从而实现对模板的解析。这里的状态是有限个的，随着逐个字符的读取，解析器会自动切换不同的状态，这就是<strong>有限状态自动机</strong>。我们先来看看解析 <code>Vue</code> 模板需要多少种状态：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Element node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span>RCDATA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line">      RAWTEXT</span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    {{ Interpolation }}</span>
<span class="line">    Text</span>
<span class="line">    <span class="token comment">&lt;!-- comment --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面列举了常见的几种文本：</p><ul><li><p><strong>一般的标签元素，对应 DATA 模式：<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code></strong></p></li><li><p><strong>RCDATA 模式下的标签元素：<code>&lt;textarea&gt;</code></strong></p></li><li><p><strong>RAWTEXT 模式下的标签元素：<code>&lt;style&gt;</code></strong></p></li><li><p><strong>插值：<code>{{ }}</code></strong></p></li><li><p><strong>文本：<code>Text</code></strong></p></li><li><p><strong>注释：<code>&lt;!-- --&gt;</code></strong></p></li></ul><p>根据上述的这些文本我们可以画出如下状态转换图：</p><p><img src="http://hh-oss-picture.miyapay.com/box/ac48aceeeed74dd421e7afd6ea254a8e.png" alt=""></p><p>通过该状态图，我们可以画出如下流程图：</p><p><img src="http://hh-oss-picture.miyapay.com/box/14097517d9446e8532bfc30d532f25fd.png" alt=""></p><p>接下来我们就可以开始一步一步实现解析器了</p><h4 id="定义模板ast" tabindex="-1"><a class="header-anchor" href="#定义模板ast"><span>定义模板AST</span></a></h4><br> 我们的解析器最终会将模板字符串解析为模板AST，那么我们先来定义一下模板AST的数据结构： <details class="hint-container details"><summary>定义模板AST数据结构</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> <span class="token constant">TYPE</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">ROOT</span> <span class="token operator">=</span> <span class="token string">&quot;ROOT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 根节点</span></span>
<span class="line">  <span class="token constant">ELEMENT</span> <span class="token operator">=</span> <span class="token string">&quot;ELEMENT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 标签节点</span></span>
<span class="line">  <span class="token constant">COMMENT</span> <span class="token operator">=</span> <span class="token string">&quot;COMMENT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 注释</span></span>
<span class="line">  <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 文本</span></span>
<span class="line">  <span class="token constant">INTERPOLATION</span> <span class="token operator">=</span> <span class="token string">&quot;INTERPOLATION&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 插值</span></span>
<span class="line">  <span class="token constant">EXPRESSION</span> <span class="token operator">=</span> <span class="token string">&quot;EXPRESSION&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表达式</span></span>
<span class="line">  <span class="token constant">ATTRIBUTE</span> <span class="token operator">=</span> <span class="token string">&quot;ATTRIBUTE&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 属性</span></span>
<span class="line">  <span class="token constant">DIRECTIVE</span> <span class="token operator">=</span> <span class="token string">&quot;DIRECTIVE&quot;</span> <span class="token comment">// 指令</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TplAst</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token comment">// 类型</span></span>
<span class="line">  tag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 标签名</span></span>
<span class="line">  isSelfClosing<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token comment">// 是否为自闭合</span></span>
<span class="line">  props<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// 属性</span></span>
<span class="line">  content<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Content<span class="token punctuation">,</span> <span class="token comment">// 内容，文本和表达式共用content</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// 子节点</span></span>
<span class="line">  jsNode<span class="token operator">?</span><span class="token operator">:</span> JsAst<span class="token punctuation">,</span> <span class="token comment">// 后续转换为jsAST的时候使用</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 属性</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span> <span class="token operator">|</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">,</span> <span class="token comment">// 属性的类型</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 属性名称</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 属性值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当节点类型为表达式时的内容</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">EXPRESSION</span><span class="token punctuation">,</span> </span>
<span class="line">  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>定义完模板AST的数据结构之后我们就可以写出解析器的代码了：</p><details class="hint-container details"><summary>解析器代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parse <span class="token operator">=</span> <span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> TplAst <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 上下文对象</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> consumeSpace <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">consumeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 解析节点，该方法会返回解析之后的子节点</span></span>
<span class="line">  <span class="token comment">// 第一个参数为上下文对象，第二个参数为父级节点构成的节点栈，初始时为空数组</span></span>
<span class="line">  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 解析器返回根节点</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">,</span></span>
<span class="line">    children<span class="token operator">:</span> nodes</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>通过代码我们可以发现，其实整个解析器的实现流程就是实现下面三步：</p><p><img src="http://hh-oss-picture.miyapay.com/box/9f93a1a7ed79af51811ec3cee510c20d.png" alt=""></p><p>那接下来我们就各个击破！</p><h4 id="上下文对象-context" tabindex="-1"><a class="header-anchor" href="#上下文对象-context"><span>上下文对象 Context</span></a></h4><br><p>上下文对象其实不是一个陌生的概念，我们在编写复杂的转换函数时，通常需要定义一个上下文对象来维护全局的共享数据，比如当前解析器的状态、当前解析的文本等等。</p><details class="hint-container details"><summary>定义上下文对象</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> <span class="token constant">MODE</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">DATA</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RCDATA</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RAWTEXT</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span></span>
<span class="line">  source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 当前正在解析的文本</span></span>
<span class="line"></span>
<span class="line">  mode<span class="token operator">:</span> <span class="token constant">MODE</span><span class="token punctuation">;</span> <span class="token comment">// 解析器处于什么模式</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 构造函数，上下文对象中的初始mode为DATA</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token constant">MODE</span><span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> source<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费字符</span></span>
<span class="line">  <span class="token function-variable function">consume</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费空白字符</span></span>
<span class="line">  <span class="token function-variable function">consumeSpace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\t\\r\\n\\f\\s ]*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在上下文对象中，我们还定义了两个内部方法，<code>consume</code> 和 <code>consumeSpace</code> ，当我们解析模板字符串的时候，需要对模板字符串进行消费，即：删掉已经解析过的字符串。</p><h4 id="解析子节点" tabindex="-1"><a class="header-anchor" href="#解析子节点"><span>解析子节点</span></a></h4><br><p>当定义好上下文对象之后，我们就要开始实现对子节点的解析了，可以看到，解析子节点是整个解析器的核心。我们可以根据上面画过的流程图来写出解析子节点的代码：</p><details class="hint-container details"><summary>解析子节点</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 子节点解析</span></span>
<span class="line"><span class="token comment">// 第一个参数为上下文对象</span></span>
<span class="line"><span class="token comment">// 第二个参数为祖先节点栈</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parseChildren <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> ancestors<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 用来存储子节点的数组</span></span>
<span class="line">  <span class="token keyword">const</span> nodes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 循环解析模板字符串</span></span>
<span class="line highlighted">  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 定义当前节点，初始为undefinded</span></span>
<span class="line">    <span class="token keyword">let</span> node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// DATA 模式和 RCDATA 模式下支持标签和插值节点的解析</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token constant">MODE</span><span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">||</span> context<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token constant">MODE</span><span class="token punctuation">.</span><span class="token constant">RCDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> mode<span class="token punctuation">,</span> source <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 解析标签</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token constant">MODE</span><span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>source<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 解析注释节点</span></span>
<span class="line highlighted">            node <span class="token operator">=</span> <span class="token function">parseComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 无效的结束标签</span></span>
<span class="line">          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;无效的结束标签&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 解析标签节点</span></span>
<span class="line highlighted">          node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;{{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 解析插值节点</span></span>
<span class="line highlighted">        node <span class="token operator">=</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 没有通过上面的代码进行解析，说明是文本节点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 解析文本节点</span></span>
<span class="line highlighted">      node <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 解析完成的节点添加到节点数组中去</span></span>
<span class="line">    nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 返回子节点所组成的数组</span></span>
<span class="line">  <span class="token keyword">return</span> nodes<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>通过上面的代码以及前文的分析，我们知道，<code>parseChildren</code> 方法本质上是一个<strong>有限状态自动机</strong>，她通过 <code>while</code> 循环来实现自动运行。那么该状态机何时停止呢？我们就有必要了解一下 <code>isEnd</code> 方法的实现逻辑了。</p><h4 id="模板解析的过程" tabindex="-1"><a class="header-anchor" href="#模板解析的过程"><span>模板解析的过程</span></a></h4>`,42)),p(k),s[33]||(s[33]=e(`<br><p>上面是一个模拟模板解析的简单动画，点击 <code>Next</code> 按钮，可以一步一步解析整个模板字符串，可以看到：</p><p><strong>1.当解析器遇到 <code>&lt;div&gt;</code> 时，会开启状态机1，同时向父级节点栈（Ancestors）插入<code>div</code>节点</strong></p><p><strong>2.状态机1继续执行，当解析器遇到 <code>&lt;p&gt;</code> 时，会开启状态机2，同时向父级节点栈插入<code>p</code>节点</strong></p><p><strong>3.状态机2继续执行，当解析器遇到 <code>&lt;/p&gt;</code> 时，检查父节点栈中是否有<code>&lt;p&gt;</code>节点，如果有，说明该标签被解析完成了，结束状态机2</strong></p><p><strong>4.状态机1继续执行，当解析器遇到 <code>&lt;p&gt;</code> 时，会开启状态机3，同时向父级节点栈插入<code>p</code>节点</strong></p><p><strong>5.状态机3继续执行，当解析器遇到 <code>&lt;/p&gt;</code> 时，检查父节点栈中是否有<code>&lt;p&gt;</code>节点，如果有，说明该标签被解析完成了，结束状态机3</strong></p><p><strong>6.状态机1继续执行，当解析器遇到 <code>&lt;/div&gt;</code> 时，且父节点栈中有<code>&lt;div&gt;</code>节点，整个模板解析完成，结束状态机1</strong></p><p>那么我们就可以写出 <code>isEnd</code> 方法的实现代码了：</p><details class="hint-container details"><summary>isEnd 代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// isEnd 方法接受两个参数</span></span>
<span class="line"><span class="token comment">// 第一个参数为上下文对象</span></span>
<span class="line"><span class="token comment">// 第二个参数为祖先节点栈</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> isEnd <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> ancestors<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 如果文本被解析完了，直接返回 true</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 倒序遍历祖先节点栈</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> ancestors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果当前遇到的闭合标签与祖先节点中的标签匹配，返回true</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ancestors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="解析标签节点" tabindex="-1"><a class="header-anchor" href="#解析标签节点"><span>解析标签节点</span></a></h4><br> 当确定状态机停止的时机之后，我们就可以去实现相应的节点解析方法了，我们先从难度最大的标签解析开始。 <p>我们知道，标签的结构简单说来，就是如下三部分：</p><p><img src="http://hh-oss-picture.miyapay.com/box/9550e9ca25faa41bc02bd23ae0aff852.png" alt=""></p><p>我们解析标签，就是解析上面三部分，那么我们可以写出以下代码：</p><details class="hint-container details"><summary>解析标签节点代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">parseElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> ancestors<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 解析开始标签</span></span>
<span class="line">  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 解析标签中的子节点，递归调用 parseChildren</span></span>
<span class="line">  element<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 解析结束标签</span></span>
<span class="line">  <span class="token keyword">const</span> isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> isEnd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="parsetag" tabindex="-1"><a class="header-anchor" href="#parsetag"><span>parseTag</span></a></h5><br> 可以看到，解析标签的核心方法就是 \`parseTag\`，解析标签，就是找到匹配标签的规则，然后再进行解析，下面这段代码为一个常见的标签节点： <div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一个常见标签节点一般有如下元素：</p><ul><li><p><strong>开始标签：<code>&lt;div&gt;</code></strong></p></li><li><p><strong>标签属性：<code>v-if=&quot;foo&quot;</code>、<code>id=&quot;bar&quot;</code></strong></p></li><li><p><strong>结束标签：<code>&lt;/div&gt;</code></strong></p></li><li><p><strong>自闭合标签：<code>&lt;image /&gt;</code></strong></p></li></ul><p>那我们就可以画出如下解析流程图：</p><p><img src="http://hh-oss-picture.miyapay.com/box/d9dfd831c4c6ab69fff9861782393143.png" alt=""></p><p>根据上面的流程图，我们可以写出如下解析标签的代码：</p><details class="hint-container details"><summary>parseTag 代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 方法接收两个参数</span></span>
<span class="line"><span class="token comment">// 第一个参数为上下文对象</span></span>
<span class="line"><span class="token comment">// 第二个参数为一个标识，用来判断是否是解析结束标签</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parseTag <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> TplAst <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 从上下文对象中拿出两个消费方法，分别用来消费字符以及空白字符</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> consume<span class="token punctuation">,</span> consumeSpace <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 正则匹配是否是结束标签还是开始标签</span></span>
<span class="line">  <span class="token keyword">const</span> match <span class="token operator">=</span> isEnd <span class="token operator">?</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;\\/([a-z][^\\t\\n\\r\\f /&gt;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;([a-z][^\\t\\n\\r\\f /&gt;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 匹配到的标签名</span></span>
<span class="line">    <span class="token keyword">const</span> tag <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// match[0].length为匹配到的字符串长度</span></span>
<span class="line">    <span class="token comment">// 调用消费方法，将解析过的字符串消费掉</span></span>
<span class="line">    <span class="token function">consume</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 消费空白字符，因为可能会出现&lt;p       v-if=&quot;&quot;&gt;foo&lt;/p&gt;</span></span>
<span class="line">    <span class="token function">consumeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 解析属性</span></span>
<span class="line">    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">parseProps</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 判断是否是自闭合标签</span></span>
<span class="line">    <span class="token keyword">const</span> isSelfClosing <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果是自闭合，消费 &#39;/&gt;&#39;，如果不是，消费 &#39;&gt;&#39;</span></span>
<span class="line">    <span class="token function">consume</span><span class="token punctuation">(</span>isSelfClosing <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 依旧需要消费空格</span></span>
<span class="line">    <span class="token function">consumeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 解析完成返回标签的对象</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span></span>
<span class="line">      children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      props<span class="token punctuation">,</span></span>
<span class="line">      tag<span class="token punctuation">,</span></span>
<span class="line">      isSelfClosing<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;不合法的标签&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>上述代码中提到了两个正则表达式：</p><ul><li><strong><code>/^&lt;\\/([a-z][^\\t\\n\\r\\f /&gt;]*)/i</code></strong></li></ul><p>匹配结束标签，结束标签必须以 <code>&lt;/</code> 开头，且后面要紧跟字符（<code>[a-z]</code>），且中间不能有空白字、<code>/</code> 和 <code>&gt;</code>（<code>[^\\t\\n\\r\\f /&gt;]*</code>）</p><ul><li><strong><code>/^&lt;([a-z][^\\t\\n\\r\\f /&gt;]*)/i</code></strong></li></ul><p>匹配开始标签，结束标签必须以 <code>&lt;</code> 开头，且后面要紧跟字符（<code>[a-z]</code>），且中间不能有空白字、<code>/</code> 和 <code>&gt;</code>（<code>[^\\t\\n\\r\\f /&gt;]*</code>）</p><h5 id="解析属性" tabindex="-1"><a class="header-anchor" href="#解析属性"><span>解析属性</span></a></h5><br><p>在解析标签节点的时候，还要有一个非常重要的解析方法，那就是对于属性的解析，我们先来看看属性的结构：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>bar</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>show<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过上面的代码，我们可以提炼出属性的结构：</p><ul><li><p><strong>属性名：<code>v-if</code>、<code>id</code>、<code>v-show</code></strong></p></li><li><p><strong>等号：<code>=</code></strong></p></li><li><p><strong>属性值：<code>foo</code>、<code>bar</code>、<code>show</code>，属性值还分为三种情况：双引号包裹、单引号包裹以及没有引号</strong></p></li></ul><p>根据上面这些结构，我们画一下解析属性的流程图：</p><p><img src="http://hh-oss-picture.miyapay.com/box/a8a45a2d36dab11dce3d24f8500f99bb.png" alt=""></p><p>根据上面的流程图，我们就可以写出解析属性的代码了：</p><details class="hint-container details"><summary>解析属性代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parseProps <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> consume<span class="token punctuation">,</span> consumeSpace <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 用来存储属性的数组 </span></span>
<span class="line">  <span class="token keyword">const</span> props<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span>  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 属性解析的结束标志</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 匹配属性名</span></span>
<span class="line">    <span class="token keyword">const</span> matchName <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^\\t\\n\\r\\f /&gt;][^\\t\\n\\r\\f /&gt;=]*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 获取属性名</span></span>
<span class="line">      <span class="token keyword">const</span> name <span class="token operator">=</span> matchName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 消费属性名长度的字符</span></span>
<span class="line">      <span class="token function">consume</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 消费空白字符</span></span>
<span class="line">      <span class="token function">consumeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 消费等号</span></span>
<span class="line">      <span class="token function">consume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 消费空白字符</span></span>
<span class="line">      <span class="token function">consumeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 属性值初始为&#39;&#39;</span></span>
<span class="line">      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 判断是否有引号包裹</span></span>
<span class="line">      <span class="token keyword">const</span> quote <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> isQuoted <span class="token operator">=</span> quote <span class="token operator">===</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">||</span> quote <span class="token operator">===</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>isQuoted<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 消费引号</span></span>
<span class="line">        <span class="token function">consume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 结束引号的位置</span></span>
<span class="line">        <span class="token keyword">const</span> endQuoteIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>endQuoteIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 当前位置到引号结束位置就是属性值的内容</span></span>
<span class="line">          value <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> endQuoteIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 解析完成之后消费属性值长度的字符串</span></span>
<span class="line">          <span class="token function">consume</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 消费结束引号</span></span>
<span class="line">          <span class="token function">consume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;缺少引号&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 没有引号的情况下直接匹配属性值</span></span>
<span class="line">        <span class="token keyword">const</span> matchValue <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^\\t\\n\\r\\f /&gt;]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>matchValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          value <span class="token operator">=</span> matchValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">consume</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;不合法的属性值&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">consumeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 解析完成之后将解析完毕的属性添加到属性数组中</span></span>
<span class="line">      props<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果属性名以如下字符开头，则可以视为 directive</span></span>
<span class="line">        type<span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;v-&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span> <span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span><span class="token punctuation">,</span></span>
<span class="line">        name<span class="token punctuation">,</span></span>
<span class="line">        value<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;不合法的属性名&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> props<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>上述代码中提到了两个正则表达式：</p><ul><li><strong><code>/^[^\\t\\n\\r\\f /&gt;][^\\t\\n\\r\\f /&gt;=]*/</code></strong></li></ul><p>表达式分为两部分，前面一个 <code>[]</code> 用来匹配一个位置，该位置不能是 <code>空白字符</code>、<code>/</code> 以及 <code>&gt;</code>，后面一个 <code>[]</code> 用于匹配 0 个或多个位置，这些位置不能是 <code>空白字符</code>，也不能是 <code>/</code>、<code>&gt;</code>、<code>=</code>。注意，这些位置不允许出现 <code>=</code>，这就实现了只匹配等于号之前的内容，即属性名称。</p><ul><li><strong><code>/^[^\\t\\n\\r\\f /&gt;]+/</code></strong></li></ul><p>该正则表达式从字符串的开始位置进行匹配，并且会匹配一个或多个非空白字符、非字符 <code>&gt;</code>。即：该正则表达式会一直对字符串进行匹配，直到遇到 <code>空白字符</code> 或 <code>&gt;</code> 为止，这就实现了属性值的提取。</p><h5 id="完善-parseelement" tabindex="-1"><a class="header-anchor" href="#完善-parseelement"><span>完善 parseElement</span></a></h5><br> 在前面我们写了一下 \`parseElement\` 的伪代码。前面我们实现的标签解析、属性解析等都是以一般的标签节点为例，但是标签节点分为多种情况（在前面也介绍过不同的模式），我们接下来还需要考虑其他不同类型的标签节点，比如： <ul><li><p><strong><code>textarea</code>、<code>title</code></strong></p></li><li><p><strong><code>style</code>、<code>iframe</code>等</strong></p></li></ul><p>下面是完整的 <code>parseElement</code> 的实现</p><details class="hint-container details"><summary>parseElement 完整代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">parseElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> ancestors<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 解析开始标签</span></span>
<span class="line">  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 是否为自闭合标签</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>isSelfClosing<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> element<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// textarea、title 标签需要切换模式</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;textarea&#39;</span> <span class="token operator">||</span> element<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      context<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token constant">MODE</span><span class="token punctuation">.</span><span class="token constant">RCDATA</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// style等标签也需要切换模式</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">style|xmp|iframe|noembed|noframes|noscript</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      context<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token constant">MODE</span><span class="token punctuation">.</span><span class="token constant">RAWTEXT</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 解析正常的标签节点</span></span>
<span class="line">      context<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token constant">MODE</span><span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 将节点插入栈中</span></span>
<span class="line">    ancestors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 解析子节点</span></span>
<span class="line">    element<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 出栈</span></span>
<span class="line">    ancestors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 解析结束标签</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>element<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>element<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 标签缺少闭合标签</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> element<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="解析文本" tabindex="-1"><a class="header-anchor" href="#解析文本"><span>解析文本</span></a></h4><br> 我们先来看看文本节点在模板字符串中的结构： <div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Text1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Text2 {{ foo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>文本的解析其实比较简单，我们只需要找到文本的结束位置即可。通过上面的代码我们发现，文本的结束位置有两种情况：</p><ul><li><p><strong>遇到 <code>&lt;</code></strong></p></li><li><p><strong>遇到 <code>{{</code></strong></p></li></ul><details class="hint-container details"><summary>解析文本节点代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parseText <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> TplAst <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> consume <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 文本结束位置，初始为整个字符串的结束位置</span></span>
<span class="line">  <span class="token keyword">let</span> endIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 文本解析的结束位置要么是下一个标签的开始，即：遇到&#39;&lt;&#39;</span></span>
<span class="line">  <span class="token keyword">const</span> elementStartIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 要么是插值节点的开始，即：遇到 &#39;{{&#39;</span></span>
<span class="line">  <span class="token keyword">const</span> interpolationIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;{{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 比较两个结束位置，取较小值</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>elementStartIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> elementStartIndex <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    endIndex <span class="token operator">=</span> elementStartIndex<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>interpolationIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> interpolationIndex <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    endIndex <span class="token operator">=</span> interpolationIndex<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 截取文本</span></span>
<span class="line">  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费文本长度的字符</span></span>
<span class="line">  <span class="token function">consume</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span></span>
<span class="line">    content<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="解析注释" tabindex="-1"><a class="header-anchor" href="#解析注释"><span>解析注释</span></a></h4><br><p>注释的解释也很简单，跟文本类似，我们也只需要确定注释的结束位置即可，注释的结束位置就是结束标识符：<code>--&gt;</code></p><details class="hint-container details"><summary>解析注释代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parseComment <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> TplAst <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> consume <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费注释开始标识符</span></span>
<span class="line">  <span class="token function">consume</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取注释结束的位置</span></span>
<span class="line">  <span class="token keyword">const</span> closeIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;--&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 不合法的注释</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>closeIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;缺少注释界定符&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取注释内容</span></span>
<span class="line">  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> closeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费注释内容</span></span>
<span class="line">  <span class="token function">consume</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费结束标识符</span></span>
<span class="line">  <span class="token function">consume</span><span class="token punctuation">(</span><span class="token string">&#39;--&gt;&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token punctuation">,</span></span>
<span class="line">    content<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="解析插值" tabindex="-1"><a class="header-anchor" href="#解析插值"><span>解析插值</span></a></h4><br><p>插值的解析和注释比较类似，我们只需要找到插值的结束标识符即可：<code>}}</code>，另外插值的内容是表达式，所以插值的 <code>content</code> 我们使用这样的结构来表示：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">content<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">EXPRESSION</span><span class="token punctuation">,</span></span>
<span class="line">  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>解析插值</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parseInterpolation <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> TplAst <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> consume <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费插值开始标识符</span></span>
<span class="line">  <span class="token function">consume</span><span class="token punctuation">(</span><span class="token string">&#39;{{&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取插值结束位置</span></span>
<span class="line">  <span class="token keyword">const</span> closeIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;}}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 不合法的插值</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>closeIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;缺少插值界定符&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 截取插值</span></span>
<span class="line">  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> closeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费插值内容</span></span>
<span class="line">  <span class="token function">consume</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 消费插值结束标识符</span></span>
<span class="line">  <span class="token function">consume</span><span class="token punctuation">(</span><span class="token string">&#39;}}&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 返回插值节点，插值的内容为表达式，所以这里给了一个新的类型</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span></span>
<span class="line">    content<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">EXPRESSION</span><span class="token punctuation">,</span></span>
<span class="line">      content<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>那么至此，我们就实现了一个简单的解析器，可以将 <code>&lt;div v-if=&quot;foo&quot; id=&quot;bar&quot;&gt;&lt;p&gt;Text1&lt;/p&gt;&lt;p&gt;Text2&lt;/p&gt;&lt;/div&gt;</code> 粘贴到下面的文本框中，然后点击 <code>Parse</code> 查看效果</p>`,70)),p(o,{"is-parse":!0}),s[34]||(s[34]=e(`<h3 id="转换器" tabindex="-1"><a class="header-anchor" href="#转换器"><span>转换器</span></a></h3><br><p>我们在前面已经实现了解析器，我们知道解析器会将模板代码转换为模板AST，那么下一步，我们就需要对模板AST进一步处理，将其转换为 <code>JavaScript AST</code>，这就需要转换器来实现了：</p><p><img src="http://hh-oss-picture.miyapay.com/box/d14cd22b2ba1e00f499b65b3492500b1.png" alt=""></p><p>我们先定义一下 <code>transform</code> 方法：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">transform</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  ast<span class="token operator">:</span> TplAst<span class="token punctuation">,</span></span>
<span class="line">  plugins<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>currentNode<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 定义上下文对象</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 访问节点</span></span>
<span class="line">  <span class="token function">traverseNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换器的核心其实就是对模板AST进行处理，进而将其转换为 <code>JavaScript AST</code>，要想实现对模板AST的处理，我们就需要能访问模板AST中的每一个节点,也就是需要实现上述代码中的 <code>traverseNode</code>，由于模板AST的结构是一颗树，我们可以画出访问模板AST的流程图：</p><p><img src="http://hh-oss-picture.miyapay.com/box/f65532565f4139813211fe41cca2588b.png" alt=""></p><p>根据上述流程图，我们可以实现 <code>traverseNode</code>：</p><details class="hint-container details"><summary>traverseNode 代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">traverseNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ast<span class="token operator">:</span> TplAst<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 当前节点</span></span>
<span class="line">  <span class="token keyword">const</span> currentNode <span class="token operator">=</span> ast<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 当前节点的子节点</span></span>
<span class="line">  <span class="token keyword">const</span> children <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// handle currentNode</span></span>
<span class="line">  <span class="token comment">//------------------------------------------</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> tag <span class="token punctuation">}</span> <span class="token operator">=</span> currentNode<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span> tag <span class="token operator">===</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    currentNode<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    currentNode<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&quot;Morris is an idiot&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// more todos can put here</span></span>
<span class="line">  <span class="token comment">//------------------------------------------</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 递归访问子节点</span></span>
<span class="line">  children <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="插件架构" tabindex="-1"><a class="header-anchor" href="#插件架构"><span>插件架构</span></a></h4><br><p>在上面的代码中，我们在访问节点的时候可能需要写很多处理节点的方法，比如上面代码中实现的替换标签以及替换文本的功能。当然，随着功能不断变得复杂，我们会加入更多的处理方法在 <code>traverseNode</code> 中，这样就会导致 <code>traverseNode</code> 变得非常臃肿，为了解决这个问题，我们可以将处理方法拿出来，通过插件的形式进行处理，在实现插件架构之前，我们先定义上下文对象：</p><details class="hint-container details"><summary>上下文对象数据结构</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span></span>
<span class="line">  currentNode<span class="token operator">:</span> TplAst <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 当前访问节点</span></span>
<span class="line"></span>
<span class="line">  childIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 当前节点在父节点中的索引</span></span>
<span class="line"></span>
<span class="line">  parent<span class="token operator">:</span> TplAst <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 当前节点的父节点</span></span>
<span class="line"></span>
<span class="line highlighted">  plugins<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>currentNode<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 插件，为一个函数数组</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>有了上下文对象之后，我们就可以将处理节点的方法抽离出来，全部在上下文对象中存储：</p><details class="hint-container details"><summary>重新实现的 traverseNode 代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">traverseNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ast<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 在上下文对象中维护当前节点</span></span>
<span class="line">  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> ast<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 取出上下文对象中的插件方法</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> plugins <span class="token operator">=</span> context<span class="token punctuation">.</span>plugins<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 遍历执行</span></span>
<span class="line highlighted">  plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取子节点</span></span>
<span class="line">  <span class="token keyword">const</span> children <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      context<span class="token punctuation">.</span>parent <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token punctuation">;</span></span>
<span class="line">      context<span class="token punctuation">.</span>childIndex <span class="token operator">=</span> index<span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 递归处理子节点</span></span>
<span class="line">      <span class="token function">traverseNode</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="节点的进入与退出" tabindex="-1"><a class="header-anchor" href="#节点的进入与退出"><span>节点的进入与退出</span></a></h4><br> 在处理节点的时候，我们有时候需要等待子节点处理完成之后才去处理父节点，但是我们目前设计的转换工作流是无法实现这一点的，如下图所示： <p><img src="http://hh-oss-picture.miyapay.com/box/68df4a864022ce2bd17a85f437718049.png" alt=""></p><p>我们现在的工作流在处理某个子节点的时候，其父节点就已经被处理完了，我们再也无法回头去处理父节点了。为了解决这样的问题，我们需要如下的工作流：</p><p><img src="http://hh-oss-picture.miyapay.com/box/dbd7e1368620897d5f59712fbebc06c6.png" alt=""></p><p>通过上图我们可以看到，这种工作流对节点的访问分为两个阶段：进入阶段和退出阶段。</p><ul><li><strong>进入阶段：先进入父节点，再进入子节点</strong></li><li><strong>退出阶段：先退出子节点，再退出父节点</strong></li></ul><p>那我们重新实现 <code>traverseNode</code>：</p><details class="hint-container details"><summary>重新实现过的 traverseNode</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">traverseNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ast<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 上下文对象中维护当前节点</span></span>
<span class="line">  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> ast<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 定义一个数组，用来缓存退出方法</span></span>
<span class="line">  <span class="token keyword">const</span> exitFns<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取插件方法</span></span>
<span class="line">  <span class="token keyword">const</span> plugins <span class="token operator">=</span> context<span class="token punctuation">.</span>plugins<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 转换函数可以返回另外一个函数，该函数即作为退出阶段的回调函数</span></span>
<span class="line">    <span class="token keyword">const</span> onExit <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>onExit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 将退出阶段的回调函数添加到 exitFns 数组中</span></span>
<span class="line">      exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> children <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      context<span class="token punctuation">.</span>parent <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token punctuation">;</span></span>
<span class="line">      context<span class="token punctuation">.</span>childIndex <span class="token operator">=</span> index<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">traverseNode</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 反序执行缓存在 exitFns 中的方法</span></span>
<span class="line">  <span class="token keyword">let</span> i <span class="token operator">=</span> exitFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    exitFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 一个转换函数的例子，该函数会返回另一个函数</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">handleText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&quot;Morris is an idiot&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>那我们就已经实现好了节点访问的方法，有了该方法，那么接下来我们任务就是去实现将模板AST节点转换为 <code>Javascript AST</code> 节点的方法。</p><h4 id="javascript-ast" tabindex="-1"><a class="header-anchor" href="#javascript-ast"><span>Javascript AST</span></a></h4><br><p>在实现转换方法之前，我们需要先了解一下转换后的 <code>JavaScript AST</code> 的结构。我们知道 <code>JavaScript AST</code> 也是一个中间代码，编译器最终会根据她来生成目标代码，也就是如下所示的渲染函数：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就是最终所要生成的渲染函数，那么我们怎么去描述这个函数呢？我们先将该函数体进行解构：</p><ul><li><p><strong>函数声明：<code>function</code></strong></p></li><li><p><strong>函数签名：<code>render</code></strong></p></li><li><p><strong>函数体：<code>{...}</code></strong></p></li><li><p><strong>return语句：<code>h(&quot;div&quot;, [h(&quot;p&quot;, &quot;Text1&quot;), h(&quot;p&quot;, &quot;Text2&quot;)])</code></strong></p></li><li><p><strong>return语句的值为函数调用：<code>h(...)</code></strong></p></li><li><p><strong>函数的参数：<code>&quot;div&quot;, [h(&quot;p&quot;, &quot;Text1&quot;), h(&quot;p&quot;, &quot;Text2&quot;)</code></strong></p></li></ul><p>通过上面这些元素，我们就可以这样去描述 <code>render</code> 方法：</p><details class="hint-container details"><summary>用 Javascript AST 描述 render 函数</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;FUNC&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;render&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;RETURN&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&quot;returnExpress&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CALL&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;arguments&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;div&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;ARRAY&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;elements&quot;</span><span class="token operator">:</span></span>
<span class="line">            <span class="token punctuation">[</span></span>
<span class="line">              <span class="token punctuation">{</span> </span>
<span class="line">                <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;CALL&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;arguments&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token punctuation">[</span></span>
<span class="line">                  <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;p&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;Text1&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">]</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">{</span></span>
<span class="line">                <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CALL&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;arguments&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token punctuation">[</span></span>
<span class="line">                  <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;p&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;Text2&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">]</span></span>
<span class="line">              <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">]</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>通过上面的结构，我们可以写出 <code>JavaScript AST</code> 的数据结构：</p><details class="hint-container details"><summary>interface JsAst</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> <span class="token constant">TYPE</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">FUNC</span> <span class="token operator">=</span> <span class="token string">&#39;FUNC&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 函数声明</span></span>
<span class="line">  <span class="token constant">STRING</span> <span class="token operator">=</span> <span class="token string">&#39;STRING&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 文本</span></span>
<span class="line">  <span class="token constant">ARRAY</span> <span class="token operator">=</span> <span class="token string">&quot;ARRAY&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 数组</span></span>
<span class="line">  <span class="token constant">CALL</span> <span class="token operator">=</span> <span class="token string">&#39;CALL&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 函数调用</span></span>
<span class="line">  <span class="token constant">RETURN</span> <span class="token operator">=</span> <span class="token string">&#39;RETURN&#39;</span><span class="token punctuation">,</span> <span class="token comment">// return 语句</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">JsAst</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">,</span></span>
<span class="line">  value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 值，用来描述函数名称等</span></span>
<span class="line">  params<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// 声明函数的参数</span></span>
<span class="line">  body<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// 函数体</span></span>
<span class="line">  arguments<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// 调用函数的传参</span></span>
<span class="line">  elements<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// 数组的元素</span></span>
<span class="line">  returnExpress<span class="token operator">?</span><span class="token operator">:</span> JsAst<span class="token punctuation">,</span> <span class="token comment">// return 表达式</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="jsnode" tabindex="-1"><a class="header-anchor" href="#jsnode"><span>jsNode</span></a></h4><br><p>在前面介绍解析器的时候，我们定义了模板AST的数据结构，在该数据结构中有一个属性：<code>jsNode</code>，该属性就是用来描述该节点的 <code>JavaScript AST</code>，我们在对节点进行 <code>Javascript AST</code> 转换时，转换结果就存储在 <code>jsNode</code> 属性上面。</p><details class="hint-container details"><summary>模板AST数据结构</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TplAst</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">,</span></span>
<span class="line">  tag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  isSelfClosing<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span></span>
<span class="line">  props<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  content<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Content<span class="token punctuation">,</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line highlighted">  jsNode<span class="token operator">?</span><span class="token operator">:</span> JsAst<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>为了更好地对模板AST进行转换，我们将两种语法树放在一起进行比较：</p><p><img src="http://hh-oss-picture.miyapay.com/box/676e701ea3793046f58fd73dabd571c3.png" alt=""></p><p>可以发现如下关系：</p><ul><li><p><strong>根节点会被转换为 render 函数</strong></p></li><li><p><strong>模板AST中的标签节点会被转换为 <code>h方法</code> 的调用，该方法的第二个参数为子节点的 <code>jsNode</code></strong></p></li></ul><h4 id="工具方法" tabindex="-1"><a class="header-anchor" href="#工具方法"><span>工具方法</span></a></h4><br><p>在具体实现转换方法之前，我们先写几个工具方法，方便后续转换时使用：</p><details class="hint-container details"><summary>tool functions</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 创建文本</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> newString <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> JsAst <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span></span>
<span class="line">  value<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建数组</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> newArray <span class="token operator">=</span> <span class="token punctuation">(</span>elements<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> JsAst <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ARRAY</span><span class="token punctuation">,</span></span>
<span class="line">  elements<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建 call</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> newCall <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> JsAst <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">CALL</span><span class="token punctuation">,</span></span>
<span class="line">  value<span class="token punctuation">,</span></span>
<span class="line">  arguments<span class="token operator">:</span> args<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建 return 表达式</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> newReturn <span class="token operator">=</span> <span class="token punctuation">(</span>returnExpress<span class="token operator">?</span><span class="token operator">:</span> JsAst<span class="token punctuation">)</span><span class="token operator">:</span> JsAst <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">RETURN</span><span class="token punctuation">,</span></span>
<span class="line">  returnExpress<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建函数声明</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">newFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">FUNC</span><span class="token punctuation">,</span></span>
<span class="line">  body<span class="token punctuation">,</span></span>
<span class="line">  value<span class="token punctuation">,</span></span>
<span class="line">  params<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="转换文本" tabindex="-1"><a class="header-anchor" href="#转换文本"><span>转换文本</span></a></h4><br><p>文本的转换比较简单，直接调用工具方法 <code>newString</code> 即可</p><details class="hint-container details"><summary>transformText</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">transformText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token constant">TPL_AST_TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 直接调用 newString</span></span>
<span class="line">    node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> <span class="token function">newString</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content <span class="token keyword">as</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="转换标签节点" tabindex="-1"><a class="header-anchor" href="#转换标签节点"><span>转换标签节点</span></a></h4><br><p>通过上面的分析我们知道：<strong>模板AST中的标签节点会被转换为 <code>h方法</code> 的调用，该方法的第二个参数为子节点的 <code>jsNode</code></strong></p><details class="hint-container details"><summary>transformElement</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">transformElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TPL_AST_TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// h 方法的第一个参数，比如：h(&#39;div&#39;)</span></span>
<span class="line">      <span class="token keyword">const</span> callExp <span class="token operator">=</span> <span class="token function">newCall</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">newString</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 如果子节点数量等于1，h 方法的第二个参数为子节点的jsNode</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jsNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            callExp<span class="token punctuation">.</span>arguments <span class="token operator">?</span> callExp<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jsNode<span class="token punctuation">)</span> <span class="token operator">:</span> callExp<span class="token punctuation">.</span>arguments <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jsNode<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 如果子节点数量大于1，h 方法的第二个参数为子节点的jsNode集合</span></span>
<span class="line">          <span class="token keyword">const</span> args <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> _<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">          callExp<span class="token punctuation">.</span>arguments <span class="token operator">?</span> callExp<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">newArray</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> callExp<span class="token punctuation">.</span>arguments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">newArray</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> callExp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="转换根节点" tabindex="-1"><a class="header-anchor" href="#转换根节点"><span>转换根节点</span></a></h4><br><p>根节点的转换也非常简单，根节点会被转换为 <code>render</code> 方法的声明</p><details class="hint-container details"><summary>transRender</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">transRender</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TPL_AST_TYPE</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取子节点的jsNode</span></span>
<span class="line">        <span class="token keyword">const</span> jsAst <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jsNode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 方法体位 return 语句</span></span>
<span class="line">        <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token function">newReturn</span><span class="token punctuation">(</span>jsAst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> <span class="token function">newFunc</span><span class="token punctuation">(</span><span class="token string">&#39;render&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>那么至此，我们就实现了一个简单的转换器，可以将 <code>&lt;div&gt;&lt;p&gt;Text1&lt;/p&gt;&lt;p&gt;Text2&lt;/p&gt;&lt;/div&gt;</code> 粘贴到下面的文本框中，然后点击 <code>Transform</code> 查看效果</p>`,62)),p(o,{"is-transform":!0}),s[35]||(s[35]=e(`<h3 id="生成目标代码" tabindex="-1"><a class="header-anchor" href="#生成目标代码"><span>生成目标代码</span></a></h3><br><p>前面我们通过转换器将模板AST转换为了 <code>JavaScript AST</code>，那么我们最后一步就是将 <code>JavaScript AST</code> 转换为<strong>目标代码</strong>，如下图所示：</p><p><img src="http://hh-oss-picture.miyapay.com/box/10abeb84b9ddc80f58a69222a3b78741.png" alt=""></p><p>其实将 <code>JavaScript AST</code> 转换为 <strong>目标代码</strong> 本质上就是：<strong>字符串拼接的艺术</strong></p><h4 id="定义上下文对象" tabindex="-1"><a class="header-anchor" href="#定义上下文对象"><span>定义上下文对象</span></a></h4><br><p>在开始生成代码之前，我们还是先定义一下上下文对象</p><details class="hint-container details"><summary>interface Context</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span></span>
<span class="line">  code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 生成的代码</span></span>
<span class="line"></span>
<span class="line">  currentIndent<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 当前缩进</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> currentIndent<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndent <span class="token operator">=</span> currentIndent<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 拼接字符串</span></span>
<span class="line">  <span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">+=</span> code<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 换行</span></span>
<span class="line">  <span class="token function-variable function">newLine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;  &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentIndent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 缩进</span></span>
<span class="line">  <span class="token function-variable function">indent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndent<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 取消缩进</span></span>
<span class="line">  <span class="token function-variable function">deIndent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndent<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="实现-generate-方法" tabindex="-1"><a class="header-anchor" href="#实现-generate-方法"><span>实现 generate 方法</span></a></h4><br><p>在上面我们定义了上下文对象，那么接下来我们先实现 <code>generate</code> 方法：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> generate <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> JsAst<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">geneNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> context<span class="token punctuation">.</span>code<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>generate</code> 方法的核心其实就是 <code>geneNode</code>，那么怎么实现 <code>geneNode</code>，我们先画一下生成代码的流程图，这里只画了函数声明和文本生成的流程图：</p><p><img src="http://hh-oss-picture.miyapay.com/box/f470f0200ff763ab9e2a8b2186f0b4d2.png" alt=""></p><p>通过该流程图，我们实现 <code>geneNode</code> 方法如下：</p><details class="hint-container details"><summary>geneNode 代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">geneNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> JsAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">switch</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 函数声明</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">FUNC</span><span class="token operator">:</span> <span class="token function">geneFuc</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// return 语句</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">RETURN</span><span class="token operator">:</span> <span class="token function">geneReturn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 函数调用语句</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">CALL</span><span class="token operator">:</span> <span class="token function">geneCall</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 文本</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token operator">:</span> <span class="token function">geneString</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 数组</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ARRAY</span><span class="token operator">:</span> <span class="token function">geneArray</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>我们的核心就是去实现上面列举的一些方法，再实现具体方法之前，先实现一个工具方法，用来拼接数组：</p><details class="hint-container details"><summary>geneNodeList</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 接受两个参数</span></span>
<span class="line"><span class="token comment">// 第一个参数为数组，第二个为上下文对象</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">geneNodeList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nodes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  nodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">:</span> JsAst<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环调用geneNode</span></span>
<span class="line">    <span class="token function">geneNode</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 如果不是最后一个节点，添加 &#39;,&#39;</span></span>
<span class="line">      <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="生成函数声明代码" tabindex="-1"><a class="header-anchor" href="#生成函数声明代码"><span>生成函数声明代码</span></a></h5><details class="hint-container details"><summary>geneFuc</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">geneFuc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> JsAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> indent<span class="token punctuation">,</span> deIndent <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 拼接函数声明</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">function </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 拼接参数</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">geneNodeList</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>params<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;) {&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 缩进</span></span>
<span class="line">  <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 递归调用geneNode生成方法体</span></span>
<span class="line">    node<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">:</span> JsAst<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">geneNode</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 消除缩进</span></span>
<span class="line">  <span class="token function">deIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="生成函数调用代码" tabindex="-1"><a class="header-anchor" href="#生成函数调用代码"><span>生成函数调用代码</span></a></h5><details class="hint-container details"><summary>geneCall</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">geneCall</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> JsAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> arguments<span class="token operator">:</span> args <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 函数签名</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 函数调用的参数</span></span>
<span class="line">      <span class="token function">geneNodeList</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="生成-return-表达式" tabindex="-1"><a class="header-anchor" href="#生成-return-表达式"><span>生成 return 表达式</span></a></h5><details class="hint-container details"><summary>geneReturn</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">geneReturn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> JsAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;return &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>returnExpress<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">geneNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>returnExpress<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="生成数组" tabindex="-1"><a class="header-anchor" href="#生成数组"><span>生成数组</span></a></h5><details class="hint-container details"><summary>geneArray</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">geneArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> JsAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>elements<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">geneNodeList</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>elements<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="生成文本" tabindex="-1"><a class="header-anchor" href="#生成文本"><span>生成文本</span></a></h5><details class="hint-container details"><summary>geneString</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">geneString</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> JsAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>那么到此我们的编译器就已经实现了，可以将 <code>&lt;div&gt;&lt;p&gt;Text1&lt;/p&gt;&lt;p&gt;Text2&lt;/p&gt;&lt;/div&gt;</code> 粘贴到下面的文本框中，然后点击 Compile 查看效果： <br></p>`,30)),p(o),s[36]||(s[36]=n("h3",{id:"最后",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#最后"},[n("span",null,"最后")])],-1)),s[37]||(s[37]=n("br",null,null,-1)),s[38]||(s[38]=n("p",null,[a("本文其实只是对编译器粗浅地讲了一下，实际上 "),n("code",null,"Vue"),a(" 的编译器比这个要复杂很多。本文为了讲清楚大致的流程和原理省略了很多细节，如果要更进一步了解可以看看 "),n("code",null,"Vue"),a(" 的源码以及社区其他优秀的文章。本篇文章中的例子，"),n("a",{href:"https://github.com/Shonrain/vue-demo/tree/main/compiler",target:"_blank",rel:"noopener noreferrer"},"请戳")],-1))])}const x=d(b,[["render",g],["__file","compile-in-vue.html.vue"]]),f=JSON.parse('{"path":"/vue/compile-in-vue.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"编译器做了什么？","slug":"编译器做了什么","link":"#编译器做了什么","children":[]},{"level":3,"title":"GPL 和 DSL","slug":"gpl-和-dsl","link":"#gpl-和-dsl","children":[]},{"level":3,"title":"什么是编译器？","slug":"什么是编译器","link":"#什么是编译器","children":[]},{"level":3,"title":"解析器","slug":"解析器","link":"#解析器","children":[]},{"level":3,"title":"转换器","slug":"转换器","link":"#转换器","children":[]},{"level":3,"title":"生成目标代码","slug":"生成目标代码","link":"#生成目标代码","children":[]},{"level":3,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{},"filePathRelative":"vue/compile-in-vue.md","excerpt":"<h2 class=\\"blog-title\\">Vue 系列（二）：谈谈编译器</h2>\\n<p><img src=\\"http://hh-oss-picture.miyapay.com/box/8932fae91c04d5b9b928ee0671c72254.png\\" alt=\\"\\"></p>\\n<p>在<a href=\\"/vue/glance-vue.html\\" target=\\"_blank\\">上一篇文章</a>中，我们对 <code>Vue</code> 进行了简单地了解，梳理出了如上图所示的流程，在后面的文章中，我们将会以这个流程为主线对 <code>Vue</code> 进行详细地介绍，本篇我们将介绍 <code>Vue</code> 中的<strong>模板编译器</strong>。</p>"}');export{x as comp,f as data};
