import{_ as p,r as o,o as c,c as i,d as n,e as s,a as t,b as a}from"./app-fcfb95bc.js";const l={},u=n("h1",{id:"useapi",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#useapi","aria-hidden":"true"},"#"),s(" useApi")],-1),r={class:"custom-container warning"},d=n("p",{class:"custom-container-title"},"前提条件",-1),k={href:"https://axios-http.com/docs/intro",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),m=a(`<h5 id="useapi-是一个基于-axios-的-hooks-我们通过她来处理项目中的一些接口请求" tabindex="-1"><a class="header-anchor" href="#useapi-是一个基于-axios-的-hooks-我们通过她来处理项目中的一些接口请求" aria-hidden="true">#</a> useApi 是一个基于 <code>Axios</code> 的 hooks，我们通过她来处理项目中的一些接口请求</h5><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="_1-导出工具方法" tabindex="-1"><a class="header-anchor" href="#_1-导出工具方法" aria-hidden="true">#</a> 1. 导出工具方法</h3><p>在米雅的所有工程中，我们都会在文件 <code>src/apis/axios/index.ts</code> 中二次封装 axios，有了 <code>useApi</code> 只需要在该文件中：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 设置 token、header 以及 重新登录的方法自定义</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setConfig<span class="token punctuation">,</span> logout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useAxios <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;miya-design/utils&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  post<span class="token punctuation">,</span>
  get<span class="token punctuation">,</span>
  put<span class="token punctuation">,</span>
  request<span class="token punctuation">,</span>
  useGet<span class="token punctuation">,</span>
  usePost<span class="token punctuation">,</span>
  usePut<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAxios</span><span class="token punctuation">(</span>setConfig<span class="token punctuation">,</span> logout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-实现接口请求" tabindex="-1"><a class="header-anchor" href="#_2-实现接口请求" aria-hidden="true">#</a> 2. 实现接口请求</h3><ul><li><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h4></li></ul><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> get<span class="token punctuation">,</span> post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/apis/axios&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/get-list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">updateFoo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/update-foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> bar<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><h4 id="指明入参和出参类型-推荐" tabindex="-1"><a class="header-anchor" href="#指明入参和出参类型-推荐" aria-hidden="true">#</a> 指明入参和出参类型（推荐）</h4></li></ul><h5 id="_1-定义入参和出参类型" tabindex="-1"><a class="header-anchor" href="#_1-定义入参和出参类型" aria-hidden="true">#</a> 1. 定义入参和出参类型</h5><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义请求参数类型</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CouponQuery</span> <span class="token punctuation">{</span>
  pageNo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  pageSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  couponType<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">COUPON_TYPE</span><span class="token punctuation">,</span>
  cardType<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">CARD_TYPE</span><span class="token punctuation">,</span>
  status<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">STATUS</span><span class="token punctuation">,</span>
  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  createTimeStart<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  createTimeEnd<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  couponStockId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 提供初始化的单例方法</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> newCouponQuery <span class="token operator">=</span> <span class="token punctuation">(</span>pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span> CouponQuery <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  pageNo<span class="token punctuation">,</span>
  pageSize<span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义接口返回结果类型</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CouponResult</span> <span class="token punctuation">{</span>
  list<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Coupon<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  pageNum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  pageSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  totalSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 提供初始化的单例方法（默认的返回结果）</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> newCouponResult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> CouponResult  <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  pageNum<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  pageSize<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  totalSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="_2-实现请求接口" tabindex="-1"><a class="header-anchor" href="#_2-实现请求接口" aria-hidden="true">#</a> 2. 实现请求接口</h5><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useGet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/apis/axios&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useCouponList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  query<span class="token operator">:</span> CouponRequest<span class="token punctuation">,</span> 
  result<span class="token operator">:</span> CouponResult<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">useGet</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token string">&#39;coupon/cardTicket/query&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="_3-使用" tabindex="-1"><a class="header-anchor" href="#_3-使用" aria-hidden="true">#</a> 3. 使用</h5><details class="custom-container details"><summary>点击查看代码</summary><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> newCouponQuery<span class="token punctuation">,</span> newCouponResult <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/models/coupon&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCouponList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/apis/coupon/index&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// useCouponList 会提供渲染一个列表所需要的大部分方法和数据</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  listData<span class="token punctuation">,</span>
  loading<span class="token punctuation">,</span>
  queryForm<span class="token punctuation">,</span>
  pagination<span class="token punctuation">,</span>
  doQuery<span class="token punctuation">,</span>
  search<span class="token punctuation">,</span>
  reset<span class="token punctuation">,</span>
  handleTableChange<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCouponList</span><span class="token punctuation">(</span><span class="token function">newCouponQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">newCouponResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="_1-useapi" tabindex="-1"><a class="header-anchor" href="#_1-useapi" aria-hidden="true">#</a> 1. useApi</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> useApi <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token function-variable function">setConfig</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  <span class="token function-variable function">logout</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  baseURL <span class="token operator">=</span> <span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
  timeout <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  post<span class="token punctuation">,</span>
  get<span class="token punctuation">,</span>
  put<span class="token punctuation">,</span>
  request<span class="token punctuation">,</span>
  useGet<span class="token punctuation">,</span>
  usePost<span class="token punctuation">,</span>
  usePut<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="入参说明" tabindex="-1"><a class="header-anchor" href="#入参说明" aria-hidden="true">#</a> 入参说明：</h5><ul><li><h6 id="setconfig-封装请求时的一些基础配置-主要是为了设置请求头-比如零售工程中的-setconfig" tabindex="-1"><a class="header-anchor" href="#setconfig-封装请求时的一些基础配置-主要是为了设置请求头-比如零售工程中的-setconfig" aria-hidden="true">#</a> <code>setConfig</code>：封装请求时的一些基础配置，主要是为了设置请求头，比如零售工程中的 <code>setConfig</code>：</h6></li></ul><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">setConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization <span class="token operator">=</span> token<span class="token punctuation">;</span>
    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;unioncenter&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>isGray <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;gray&#39;</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><h6 id="logout-token-过期时返回登录页面的方法" tabindex="-1"><a class="header-anchor" href="#logout-token-过期时返回登录页面的方法" aria-hidden="true">#</a> <code>logout</code>：<code>token</code> 过期时返回登录页面的方法：</h6></li></ul><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">logout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;authorization&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Cookies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;authorization&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>baseURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/set-token</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><h6 id="baseurl-默认值为-api-发送请求时会自动加到请求-url-最前面" tabindex="-1"><a class="header-anchor" href="#baseurl-默认值为-api-发送请求时会自动加到请求-url-最前面" aria-hidden="true">#</a> <code>baseURL</code>：默认值为 <code>/api</code>，发送请求时会自动加到请求 <code>url</code> 最前面</h6></li><li><h6 id="timeout-请求超时时间-默认为-10-分钟" tabindex="-1"><a class="header-anchor" href="#timeout-请求超时时间-默认为-10-分钟" aria-hidden="true">#</a> <code>timeout</code>：请求超时时间，默认为 10 分钟</h6></li></ul><h5 id="部分出参说明" tabindex="-1"><a class="header-anchor" href="#部分出参说明" aria-hidden="true">#</a> 部分出参说明：</h5><ul><li><h6 id="post、get、put-根据不同的请求类型封装的方法" tabindex="-1"><a class="header-anchor" href="#post、get、put-根据不同的请求类型封装的方法" aria-hidden="true">#</a> <code>post</code>、<code>get</code>、<code>put</code>：根据不同的请求类型封装的方法：</h6></li></ul><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">(</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 请求接口 url</span>
  data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token comment">// 入参</span>
  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token comment">// 额外参数，比如设置 headers 等</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token keyword">const</span> put <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><h6 id="request-上面几个方法为零售中经常用到-若有一些接口请求上述方法不能满足-可使用-request" tabindex="-1"><a class="header-anchor" href="#request-上面几个方法为零售中经常用到-若有一些接口请求上述方法不能满足-可使用-request" aria-hidden="true">#</a> <code>request</code>：上面几个方法为零售中经常用到，若有一些接口请求上述方法不能满足，可使用 <code>request</code>：</h6></li></ul>`,28),b=n("code",null,"Axios",-1),h={href:"https://axios-http.com/docs/req_config",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>payload <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">给个台阶下（狗头）</p><p>上述方法为零售工程刚刚搭建时封装的，可以看到入参出参的类型都是 <code>any</code>（我承认为了图省事），在调用接口的时候没有类型提示。但是在项目中已经被频繁使用了，不太好兼容，就保留了上述方法。后续还是推荐大家使用接下来要介绍的 <code>usePost</code>、<code>useGet</code>、<code>put</code>。</p></div><h3 id="_2-useget" tabindex="-1"><a class="header-anchor" href="#_2-useget" aria-hidden="true">#</a> 2. useGet</h3><p><code>useGet</code>、<code>usePost</code>、<code>usePut</code> 三个方法的入参和出参都是一样的，所以这里只介绍 <code>useGet</code>，请根据不同的请求方式自行选择。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> useGet <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">Q</span> <span class="token keyword">extends</span> <span class="token class-name">ApiQuery</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  query<span class="token operator">:</span> <span class="token constant">Q</span><span class="token punctuation">,</span>
  result<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> AxiosHook<span class="token operator">&lt;</span><span class="token constant">Q</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="入参说明-1" tabindex="-1"><a class="header-anchor" href="#入参说明-1" aria-hidden="true">#</a> 入参说明：</h5>`,6),y=a('<li><h6 id="query-必填-接口请求的初始入参" tabindex="-1"><a class="header-anchor" href="#query-必填-接口请求的初始入参" aria-hidden="true">#</a> <code>query</code>：必填，接口请求的初始入参</h6></li><li><h6 id="result-必填-接口请求的初始出参" tabindex="-1"><a class="header-anchor" href="#result-必填-接口请求的初始出参" aria-hidden="true">#</a> <code>result</code>：必填，接口请求的初始出参</h6></li><li><h6 id="url-必填-接口-url" tabindex="-1"><a class="header-anchor" href="#url-必填-接口-url" aria-hidden="true">#</a> <code>url</code>：必填，接口 <code>url</code></h6></li>',3),f={id:"options-可选-额为参数。同-axios-中-request-config-比如",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#options-可选-额为参数。同-axios-中-request-config-比如","aria-hidden":"true"},"#",-1),_=n("code",null,"options",-1),w=n("code",null,"Axios",-1),q={href:"https://axios-http.com/docs/req_config",target:"_blank",rel:"noopener noreferrer"},C=a(`<details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">useGet</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">,</span> <span class="token string">&#39;get-bar&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span> headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h5 id="出参说明" tabindex="-1"><a class="header-anchor" href="#出参说明" aria-hidden="true">#</a> 出参说明：</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ApiHook<span class="token operator">&lt;</span><span class="token constant">Q</span> <span class="token keyword">extends</span> ApiQuery<span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  result<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  loading<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  query<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">Q</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  pagination<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>TablePaginationConfig<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">doQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>query<span class="token operator">:</span> <span class="token constant">Q</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">handleTableChange</span><span class="token operator">:</span> <span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function-variable function">search</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h6 id="doquery-请求该接口的方法-部分源码" tabindex="-1"><a class="header-anchor" href="#doquery-请求该接口的方法-部分源码" aria-hidden="true">#</a> <code>doQuery</code>：请求该接口的方法，部分源码：</h6></li></ul><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">doQuery</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> <span class="token constant">Q</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>

  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> req<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><h6 id="result-请求完成后的结果" tabindex="-1"><a class="header-anchor" href="#result-请求完成后的结果" aria-hidden="true">#</a> <code>result</code>：请求完成后的结果</h6></li><li><h6 id="query-本次请求的入参" tabindex="-1"><a class="header-anchor" href="#query-本次请求的入参" aria-hidden="true">#</a> <code>query</code>：本次请求的入参</h6></li><li><h6 id="loading-表示是否在请求中" tabindex="-1"><a class="header-anchor" href="#loading-表示是否在请求中" aria-hidden="true">#</a> <code>loading</code>：表示是否在请求中</h6></li><li><h6 id="pagination-传入到-antd-表格中的参数-用来实现翻页" tabindex="-1"><a class="header-anchor" href="#pagination-传入到-antd-表格中的参数-用来实现翻页" aria-hidden="true">#</a> <code>pagination</code>：传入到 <code>antd</code> 表格中的参数，用来实现翻页</h6></li><li><h6 id="handletablechange-antd-表格中的翻页方法-使用时-直接传到-a-table-中的-change-中即可" tabindex="-1"><a class="header-anchor" href="#handletablechange-antd-表格中的翻页方法-使用时-直接传到-a-table-中的-change-中即可" aria-hidden="true">#</a> <code>handleTableChange</code>：<code>antd</code> 表格中的翻页方法，使用时，直接传到 <code>a-table</code> 中的 <code>@change</code> 中即可：</h6></li></ul><details class="custom-container details"><summary>点击查看代码</summary><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-table</span>
    <span class="token attr-name">:pagination</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pagination<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loading<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleTableChange<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token punctuation">{</span> pagination<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> handleTableChange <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGet</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><h6 id="reset-重置方法-会将入参设置为初始值-然后请求一次接口" tabindex="-1"><a class="header-anchor" href="#reset-重置方法-会将入参设置为初始值-然后请求一次接口" aria-hidden="true">#</a> <code>reset</code>：重置方法，会将入参设置为初始值，然后请求一次接口</h6></li><li><h6 id="search-查询方法-会将页码设置为-1-然后根据查询条件请求一次接口" tabindex="-1"><a class="header-anchor" href="#search-查询方法-会将页码设置为-1-然后根据查询条件请求一次接口" aria-hidden="true">#</a> <code>search</code>：查询方法，会将页码设置为 1，然后根据查询条件请求一次接口</h6></li></ul><h3 id="_3-与服务端约定" tabindex="-1"><a class="header-anchor" href="#_3-与服务端约定" aria-hidden="true">#</a> 3. 与服务端约定</h3><p>为了更方便地使用 <code>a-table</code> 我们做了高度封装，因此在技术评审阶段我们需要与服务端约定好如下字段命名：</p><ul><li><h6 id="pagesize-每页请求数" tabindex="-1"><a class="header-anchor" href="#pagesize-每页请求数" aria-hidden="true">#</a> <code>pageSize</code>：每页请求数</h6></li><li><h6 id="pageno-页码" tabindex="-1"><a class="header-anchor" href="#pageno-页码" aria-hidden="true">#</a> <code>pageNo</code>：页码</h6></li><li><h6 id="current-当前页码" tabindex="-1"><a class="header-anchor" href="#current-当前页码" aria-hidden="true">#</a> <code>current</code>：当前页码</h6></li><li><h6 id="total-数据总条数" tabindex="-1"><a class="header-anchor" href="#total-数据总条数" aria-hidden="true">#</a> <code>total</code>：数据总条数</h6></li></ul>`,11);function R(A,Q){const e=o("ExternalLinkIcon");return c(),i("div",null,[u,n("div",r,[d,n("p",null,[n("a",k,[s("Axios"),t(e)]),s(" >= 0.26.1"),v])]),m,n("p",null,[s("入参可以灵活配置，同 "),b,s(" 中 "),n("a",h,[s("Request Config"),t(e)])]),g,n("ul",null,[y,n("li",null,[n("h6",f,[x,s(),_,s("：可选，额为参数。同 "),w,s(" 中 "),n("a",q,[s("Request Config"),t(e)]),s("，比如：")])])]),C])}const P=p(l,[["render",R],["__file","use-api.html.vue"]]);export{P as default};
