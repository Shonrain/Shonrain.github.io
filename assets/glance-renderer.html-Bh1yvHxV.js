import{_ as l,c as i,b as a,d as p,f as s,e,a as u,r as o,o as r}from"./app-HaVGcHMr.js";const d="/assets/renderer-6-eEbd0C.png",k="/assets/render-CSApTJLe.png",m={};function v(b,n){const c=o("Banner"),t=o("RouteLink");return r(),i("div",null,[n[16]||(n[16]=a("h2",{class:"blog-title"},"Vue 系列（九）：初识渲染器",-1)),p(c,{url:"https://applets-oss-prod.miyatech.com/cache/miyademmo/image/6060d4d84ffc416188fb44c7ad79f026_4411.png",bottom:250}),a("p",null,[n[1]||(n[1]=s("在")),p(t,{to:"/vue/glance-vue.html"},{default:e(()=>n[0]||(n[0]=[s("第一篇文章")])),_:1}),n[2]||(n[2]=s("中，我们简单提到了")),n[3]||(n[3]=a("strong",null,"渲染器",-1)),n[4]||(n[4]=s("，之后我们介绍了")),n[5]||(n[5]=a("strong",null,"编译器",-1)),n[6]||(n[6]=s("，随后又通过好几篇文章介绍了")),n[7]||(n[7]=a("strong",null,"响应式系统",-1)),n[8]||(n[8]=s("。本篇我们将正式开始介绍 ")),n[9]||(n[9]=a("code",null,"Vue",-1)),n[10]||(n[10]=s(" 中的")),n[11]||(n[11]=a("strong",null,"渲染器",-1)),n[12]||(n[12]=s("。"))]),a("p",null,[n[14]||(n[14]=s("在介绍渲染器之前，我们先来看一个例子，这个例子是我们在介绍")),p(t,{to:"/vue/compile-in-vue.html"},{default:e(()=>n[13]||(n[13]=[s("编译器")])),_:1}),n[15]||(n[15]=s("的时候所提到的："))]),n[17]||(n[17]=u(`<p>:::: code-group ::: code-group-item 模板代码</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Text1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Text2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: ::: code-group-item 渲染函数</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: ::::</p><p>我们知道，编译器会把模板代码编译为渲染函数，如上所示的 <code>render</code>，在 <code>Vue</code> 中我们可以通过这个 <code>render</code> 函数<strong>编程式</strong>地创建组件<strong>虚拟 DOM 树</strong>，具体可以查阅<a href="https://vuejs.org/api/options-rendering.html#render" target="_blank" rel="noopener noreferrer">官方文档</a>。这一步操作的本质还是将模板代码编译为了<strong>虚拟 DOM</strong>，我们的最终目的是将模板代码转换为<strong>真实 DOM</strong>，那么这就需要 <code>Vue</code> 内部的渲染器来实现了。</p><h3 id="什么是渲染器" tabindex="-1"><a class="header-anchor" href="#什么是渲染器"><span>什么是渲染器</span></a></h3><br><p><img src="`+d+`" alt=""></p><p>通过上图我们知道，渲染器的作用就是将虚拟DOM转换为真实DOM。渲染器把虚拟DOM转换为真实DOM的过程叫做<strong>挂载（mount）</strong>，大家在使用 <code>Vue</code> 时候应该用到过 <code>mounted</code> 钩子，该钩子函数就会在渲染器完成挂载操作后被触发执行。那么渲染器要把真实DOM挂载到何处呢？我们在创建一个 <code>Vue</code> 应用的时候一定使用过 <code>Vue</code> 提供的 <code>app.mount</code>：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码就是将应用实例挂载在一个容器元素中的例子。们要想让渲染器挂载真实DOM，同样也需要给她指明一个容器，这样渲染器才能知道将真实DOM挂载到何处。</p><p>通过上面的分析，我们就可以写出渲染器中渲染函数的伪代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vNode<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> idSelector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// todo</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>interface VNode</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> <span class="token constant">TYPE</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">ELEMENT</span> <span class="token operator">=</span> <span class="token string">&#39;ELEMENT&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token string">&#39;TEXT&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">COMMENT</span> <span class="token operator">=</span> <span class="token string">&#39;COMMENT&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">,</span></span>
<span class="line">  tag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  content<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  props<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container warning"><p class="hint-container-title">说明</p><br><p>本篇文章只是简述渲染器的原理，不是源码分析，实际上在 <code>Vue</code> 中渲染方法 <code>render</code> 是定义在渲染器 <code>renderer</code> 中的。另外，这里的 <code>render</code> 方法虽然与文章开头提到的渲染函数名字相同，但是她们有本质的区别，文章开头的渲染函数返回的是虚拟DOM，而这里的 <code>render</code> 则是用来将虚拟DOM转换为真实DOM的，可以理解为 <code>Vue</code> 内部的方法。 <br></p></div><h3 id="渲染器和响应式系统有何关系" tabindex="-1"><a class="header-anchor" href="#渲染器和响应式系统有何关系"><span>渲染器和响应式系统有何关系</span></a></h3><br><p>我们在前面花了大量的文章去介绍了响应式系统，那么响应式系统跟渲染器有什么联系呢？先来看一个例子：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> vNode <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span></span>
<span class="line">      content<span class="token operator">:</span> content<span class="token punctuation">.</span>value</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span>vNode<span class="token punctuation">,</span> <span class="token string">&#39;#demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  content<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">456</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们首先定义一个 <code>ref</code>，然后在 <code>effect</code> 方法中定义了一个虚拟节点 <code>vNode</code>，该虚拟节点为一个文本节点。我们通过 <code>render</code> 方法将该文本节点挂载到页面中。当我们修改 <code>content</code> 的值的时候，副作用函数会重新执行，也就是会重新渲染页面。这样我们就可以实现<strong>自动渲染页面</strong>，这就是响应式系统与渲染器的关系。</p><h3 id="实现一个简单的渲染器" tabindex="-1"><a class="header-anchor" href="#实现一个简单的渲染器"><span>实现一个简单的渲染器</span></a></h3><br><p>通过前面的介绍，我们基本知道了什么是渲染器。那么我们该如何实现一个简单的渲染器呢？在实现之前，我们先分析一下渲染器是在什么场景下实现什么功能，还是通过上面的例子：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">render</span><span class="token punctuation">(</span>vNode<span class="token punctuation">,</span> <span class="token string">&#39;#demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如上面的代码所示，每次 <code>vNode</code> 发生改变的时候都会触发副作用函数的执行，也就是会重新执行渲染函数 <code>render</code>，那么渲染函数执行的时候就会有如下三种情况：</p><ul><li><p><strong>初次渲染</strong>：只有新节点，那么此时直接执行<strong>挂载（mount）</strong> 操作</p></li><li><p><strong>打补丁</strong>：新旧节点都存在，这个时候就需要进行新旧节点的比较，然后再更新变更点。我们一般称这种操作为<strong>打补丁（patch）</strong></p></li><li><p><strong>卸载</strong>：当新节点为 <code>null</code> 且旧节点存在时，这个时候需要清空容器，我们称这种操作为<strong>卸载（unmount）</strong></p></li></ul><p><img src="`+k+`" alt=""></p><p>根据上图我们可以先写出如下代码：</p><details class="hint-container details"><summary>查看代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 定义容器的数据结构</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Container</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span></span>
<span class="line">  oldVNode<span class="token operator">?</span><span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vNode<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> idSelector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 获取容器</span></span>
<span class="line">  <span class="token keyword">const</span> container<span class="token operator">:</span> Container <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>idSelector<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 容器不存在的时候，直接返回</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 挂载或者更新</span></span>
<span class="line">    <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>oldVNode<span class="token punctuation">,</span> vNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>oldVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 卸载操作</span></span>
<span class="line">    <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 将旧的虚拟DOM存储在container中</span></span>
<span class="line">  container<span class="token punctuation">.</span>oldVNode <span class="token operator">=</span> vNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在上面的代码中，我们首先定义了一个数据结构 <code>Container</code>，用来表述容器。其中 <code>oldVNode</code> 则表示当前容器下真实DOM所对应的虚拟DOM，这样我们就能将真实DOM与虚拟DOM相关联。</p><p>在 <code>render</code> 方法中，当 <code>vNode</code> 存在时，说明是挂载或者更新，其实 <code>mount</code> 也算是一种特殊的更新操作，所以我们都通过 <code>patch</code> 方法来实现挂载和更新的功能。当 <code>vNode</code> 不存在且 <code>oldVNode</code> 存在时，说明是卸载操作，执行 <code>unmount</code>。最后我们通过 <code>container.oldVNode = vNode</code> 将虚拟DOM与对应的真实DOM进行关联。</p><p>有了大致的实现思路，接下来我们就来逐个实现其中的功能方法。</p><h4 id="patch" tabindex="-1"><a class="header-anchor" href="#patch"><span>patch</span></a></h4><br><p>我们将挂载和打补丁统一写在 <code>patch</code> 方法中：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> newVNode<span class="token operator">:</span> VNode<span class="token punctuation">,</span> container<span class="token operator">:</span> Container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 旧节点不存在，说明是挂载操作</span></span>
<span class="line">    <span class="token function">mountElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 新旧节点都存在，需要进行更新操作</span></span>
<span class="line">    <span class="token function">patchElement</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码可以知道，<code>patch</code> 方法接收三个参数，新旧虚拟节点以及容器，当旧节点不存在的时候执行挂载操作，反之则进行打补丁的操作。我们先来看看如何实现 <code>mountElement</code>：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>element<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token comment">&lt;!-- comment --&gt;</span></span>
<span class="line">text</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码我们知道，在 <code>HTML</code> 中一般有三种节点：</p><ul><li><p>标签节点</p></li><li><p>注释</p></li><li><p>文本</p></li></ul><p>所以我们只需要实现如何挂载这三种节点即可，先来看看注释节点和文本节点，她们的实现相对简单，只需要将节点挂载到相应的容器中去就可以了：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">mountElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> VNode<span class="token punctuation">,</span> container<span class="token operator">:</span> Container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 挂载DOM元素</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// todo</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 挂载注释</span></span>
<span class="line">    <span class="token keyword">const</span> comment <span class="token operator">=</span> node<span class="token punctuation">.</span>content <span class="token operator">?</span> node<span class="token punctuation">.</span>content <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> commentNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>commentNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 挂载文本</span></span>
<span class="line">    <span class="token keyword">const</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>content <span class="token operator">?</span> node<span class="token punctuation">.</span>content <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标签节点相对复杂一些，因为标签节点下面可能会有子节点，所以我们要递归调用 <code>mountElement</code>：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">mountElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> VNode<span class="token punctuation">,</span> container<span class="token operator">:</span> Container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 挂载DOM元素</span></span>
<span class="line highlighted">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> element<span class="token operator">:</span> Container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 挂载子节点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=&gt;</span> <span class="token function">mountElement</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 省略其他代码</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过递归调用 <code>mountElement</code> 实现了对标签节点的挂载。接下来我们看看如何实现 <code>patchElement</code>，我们知道，<code>patch</code> 操作需要对比新旧节点，然后找出需要更新的节点。这其实就是我们后面要讲的 <code>Diff</code> 算法，这里我们先简化操作，如果是打补丁操作，我们首先将旧节点卸载，然后进行新节点的挂载：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">patchElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token operator">:</span> VNode<span class="token punctuation">,</span> newVNode<span class="token operator">:</span> VNode<span class="token punctuation">,</span> container<span class="token operator">:</span> Container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 卸载旧节点</span></span>
<span class="line">  <span class="token function">unmount</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 挂载新节点</span></span>
<span class="line">  <span class="token function">mountElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unmount" tabindex="-1"><a class="header-anchor" href="#unmount"><span>unmount</span></a></h4><br><p>在实现 <code>patchElement</code> 的时候，我们需要先将旧节点卸载，接下来我们就来看看如何实现卸载的功能。卸载其实很简单，只需要找到父节点，然后调用 <code>removeChild</code> 将其移除就行了。要实现这一点，我们需要将虚拟DOM与真实DOM进行关联：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">,</span></span>
<span class="line">  tag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  content<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  props<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line highlighted">  el<span class="token operator">?</span><span class="token operator">:</span> Node<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们给 <code>VNode</code> 增加了一个属性 <code>el</code>，当进行挂载操作的时候，我们将真实DOM赋值给 <code>el</code>，这样就将虚拟节点与真实节点绑定在了一起：</p><details class="hint-container details"><summary>查看代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">mountElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> VNode<span class="token punctuation">,</span> container<span class="token operator">:</span> Container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 挂载DOM元素</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> element<span class="token operator">:</span> Container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将真实DOM与虚拟DOM相关联</span></span>
<span class="line highlighted">    node<span class="token punctuation">.</span>el <span class="token operator">=</span> element<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 挂载子节点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=&gt;</span> <span class="token function">mountElement</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 挂载注释</span></span>
<span class="line">    <span class="token keyword">const</span> comment <span class="token operator">=</span> node<span class="token punctuation">.</span>content <span class="token operator">?</span> node<span class="token punctuation">.</span>content <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> commentNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    node<span class="token punctuation">.</span>el <span class="token operator">=</span> commentNode<span class="token punctuation">;</span></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>commentNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 挂载文本</span></span>
<span class="line">    <span class="token keyword">const</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>content <span class="token operator">?</span> node<span class="token punctuation">.</span>content <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    node<span class="token punctuation">.</span>el <span class="token operator">=</span> textNode<span class="token punctuation">;</span></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>接下来我们就可以实现 <strong>卸载（unmount）</strong> 操作了：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vNode<span class="token operator">:</span> VNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> el <span class="token operator">=</span> vNode<span class="token punctuation">.</span>el<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token operator">:</span> VNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unmount</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line highlighted">  <span class="token keyword">const</span> parent <span class="token operator">=</span> el<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过代码可以看到，当有子节点的时候说明是标签节点，我们需要递归调用 <code>unmount</code> 进行节点的卸载，如果是其它情况，直接卸载即可。</p><h4 id="处理属性" tabindex="-1"><a class="header-anchor" href="#处理属性"><span>处理属性</span></a></h4><br><p>在进行节点挂载的时候，我们还需要考虑节点中存在<strong>属性</strong>的情况：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">patchProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> newValue<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newValue <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>patchProps</code> 接收三个参数，需要挂载属性的标签节点 <code>el</code>，属性名称 <code>key</code>，属性值 <code>newValue</code>。通过 <code>setAttribute</code> 进行属性的挂载。定义好更新属性的方法之后，我们还需要修改 <code>mountElement</code>：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">mountElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> VNode<span class="token punctuation">,</span> container<span class="token operator">:</span> Container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 挂载DOM元素</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> element<span class="token operator">:</span> Container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将真实DOM与虚拟DOM相关联</span></span>
<span class="line">    node<span class="token punctuation">.</span>el <span class="token operator">=</span> element<span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> node<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token function">patchProps</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>el <span class="token keyword">as</span> Element<span class="token punctuation">,</span> key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 省略其他代码</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 省略其他代码</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就实现了对属性的渲染。这里只是简单说明渲染的原理，其实在 <code>Vue</code> 中，渲染属性远不止这么简单。</p><h3 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h3><br><p>本篇我们简单介绍了一下渲染器，渲染器的作用就是将虚拟DOM转换为真实DOM。本文为了叙述清楚渲染器的原理，省去了很多细节，其实在 <code>Vue</code> 内部，渲染器是非常复杂的，大家可以参阅渲染器的<a href="https://github.com/vuejs/core/tree/main/packages/runtime-core" target="_blank" rel="noopener noreferrer">源码</a>，本篇文章代码<a href="https://github.com/Shonrain/vue-demo/blob/main/renderer/index.ts" target="_blank" rel="noopener noreferrer">请戳</a></p>`,66))])}const h=l(m,[["render",v],["__file","glance-renderer.html.vue"]]),y=JSON.parse('{"path":"/vue/glance-renderer.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"什么是渲染器","slug":"什么是渲染器","link":"#什么是渲染器","children":[]},{"level":3,"title":"渲染器和响应式系统有何关系","slug":"渲染器和响应式系统有何关系","link":"#渲染器和响应式系统有何关系","children":[]},{"level":3,"title":"实现一个简单的渲染器","slug":"实现一个简单的渲染器","link":"#实现一个简单的渲染器","children":[]},{"level":3,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{},"filePathRelative":"vue/glance-renderer.md","excerpt":"<h2 class=\\"blog-title\\">Vue 系列（九）：初识渲染器</h2>\\n"}');export{h as comp,y as data};
