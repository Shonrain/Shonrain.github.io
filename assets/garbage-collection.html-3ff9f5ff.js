import{_ as a,o as e,c as r,b as h}from"./app-fcfb95bc.js";const p={},d=h('<h2 class="blog-title">JS 中的垃圾回收</h2><h3 id="为什么需要垃圾回收" tabindex="-1"><a class="header-anchor" href="#为什么需要垃圾回收" aria-hidden="true">#</a> 为什么需要垃圾回收？</h3><br><p>比如程序在执行的时候需要为变量分配内存，而内存是有限的，所以当某些变量不再使用了需要将其回收掉以此来释放内存。</p><h3 id="标记清楚算法" tabindex="-1"><a class="header-anchor" href="#标记清楚算法" aria-hidden="true">#</a> 标记清楚算法</h3><p>顾名思义，就是先标记再清楚，具体做法如下：</p><p>1、给所有的变量一个标记，比如0，表示都是需要被清理的 2、从根对象开始遍历，查看对象是否可达，即是否能被引用，将能够被引用的对象标记为1 3、清理所有标记为0的对象，这部分对象就是需要进行的回收的垃圾</p><p>优点：</p><p>比较简单，标记起来只需要一个字节位置</p><p>缺点：</p><p>会导致内存碎片化</p><h3 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法" aria-hidden="true">#</a> 引用计数法</h3><p>1、当一个引用类型的值被赋值给一个变量的时候标记1 2、当这个值又赋值给其他变量了，引用数+1 3、当这个值被覆盖了，引用次数-1</p><p>当引用次数为0的时候进行清理</p><p>优点：</p><p>可以立即进行回收</p><p>缺点：</p><p>1、需要计数器，会占用内存 2、循环引用无法被回收，这是最大的缺点，也是最为严重的</p><h3 id="v8的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#v8的垃圾回收机制" aria-hidden="true">#</a> V8的垃圾回收机制</h3><p>分为新生代和老生代垃圾回收机制</p><p>V8的堆内存分为两个区：新生代区和老生代区</p><h4 id="新生代回收机制" tabindex="-1"><a class="header-anchor" href="#新生代回收机制" aria-hidden="true">#</a> 新生代回收机制</h4><p>新生代中主要存储内存较小，变动较大的引用值，即存活时间较短的对象</p><p>分为两个区，空闲区（space-to）和使用区（from-to）</p><p>当进行垃圾清理的时候主要分为如下步骤</p><p>1、标记 2、将活动对象复制到空闲区，这里会对对象进行排序，防止出现内存碎片化的情况 2.1、如果一个对象的内存超过空闲区的25%或者这个对象被复制了多次还是活动对象，会将该对象移动到老生代中 3、清理掉使用区的非活动对象 4、反转两个区，即空闲区变为使用区，使用区变为空闲区</p><h4 id="老生代回收机制" tabindex="-1"><a class="header-anchor" href="#老生代回收机制" aria-hidden="true">#</a> 老生代回收机制</h4><p>老生代的垃圾回收机制跟标记清楚法一样，只不过清楚完非活动对象之后会对内存进行整理，防止出现内存碎片的情况</p><h5 id="三色标记法" tabindex="-1"><a class="header-anchor" href="#三色标记法" aria-hidden="true">#</a> 三色标记法</h5><p>不同于标记清楚法，标记清除法只有两种颜色，我们可以规定这两种颜色为白色和黑色，白色为初始状态的颜色，当对象是可访问的时候将其标记为黑色。垃圾清除的时候直接清除掉白色的对象即可。 但是标记清楚法有一个不好的点在于，浏览器在执行垃圾回收的时候需要全停顿，即停下当前正在执行的程序然后再去执行。如果需要回收的垃圾内存较大，会出现程序停顿的情况，对于用户来说就会出现卡顿。</p><p>为了优化这种情况，V8采用了增量标记的方法，即将垃圾回收分割成多个任务去执行，即执行一会儿垃圾回收之后然后把执行权交给主线程执行程序代码。这样会出现一个问题，就是如果采用非黑即白的标记方法，当程序执行之后暂停执行垃圾回收算法然后又执行程序的时候，因为只有两种颜色，这时不知道执行到哪里了。</p><p>采用三色标记的方法，从根对象开始执行，当访问到某个对象的时候将其标记为灰色，访问到其成员变量的时候讲其标记为黑色，将其成员变量标记为灰色，没有被访问到的对象都是白色，这样当执行垃圾回收的时候就可以判断出当前执行到何处了。即如果内存中存在灰色对象则继续执行，如果全部都是黑色或者白色，就执行回收的逻辑。</p><p>特殊情况：写屏障</p><p>当执行完一段垃圾回收的任务之后，再去执行程序，这时候可能已经变成黑色的对象引用了一个新的成员，这时我们将这个新的成员颜色标记为灰色</p><h4 id="惰性清理" tabindex="-1"><a class="header-anchor" href="#惰性清理" aria-hidden="true">#</a> 惰性清理</h4><p>当标记完之后就可以进行垃圾的清理了，但是如果内存满足程序快速运行的要求，则不会立即清理，可以等到程序代码执行完之后再进行清理</p><h3 id="常见的内存泄露" tabindex="-1"><a class="header-anchor" href="#常见的内存泄露" aria-hidden="true">#</a> 常见的内存泄露</h3><p>1、闭包 2、隐式的全局变量 3、游离节点（比如remove掉了根节点，但是子节点还在被引用） 4、定时器没有被清理 5、console 6、Map（比如将Map引用的对象置为null之后，依然无法执行GC）</p>',38),i=[d];function n(t,c){return e(),r("div",null,i)}const s=a(p,[["render",n],["__file","garbage-collection.html.vue"]]);export{s as default};
