import{_ as t,r as o,o as p,c,d as s,e as n,a as i,b as a}from"./app-fcfb95bc.js";const l={},d=a(`<h1 id="开发" tabindex="-1"><a class="header-anchor" href="#开发" aria-hidden="true">#</a> 开发</h1><p>一切准备就绪，就可以开始组件开发了，在开发之前，我们需要先了解一下项目结构，以及组件开发过程中的一些约定，这样我们开发的组件才会更加规范且简单易用。</p><h2 id="packages-项目结构" tabindex="-1"><a class="header-anchor" href="#packages-项目结构" aria-hidden="true">#</a> <code>packages</code> 项目结构</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>packages
├─ components
│  ├─ choose-color
│  │  └─ ChooseColor.vue
│  ├─ components.ts
│  ├─ hot-zone
│  │  └─ HotZone.vue
│  ├─ index.ts
│  ├─ types
│  │  └─ hot-zone
│  │     ├─ HotZoneItem.ts
│  │     ├─ Pos.ts
│  │     ├─ ResizeDirection.ts
│  │     ├─ ZoneRect.ts
│  │     └─ index.ts
│  └─ types.ts
├─ package.json
├─ rollup.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>package.json</code>：跟我们日常项目中的类似，这里不做赘述</li><li><code>rollup.config.js</code>：rollup 的配置文件，主要用于打包</li><li><code>components</code>：该目录下最重要的文件夹，我们所有的组件都是在 <code>components</code> 中进行开发的</li></ul><p>以上就是 <code>packages</code> 项目的主要结构，接下来我们以开发<code>热区组件</code>为例，看看如何开发一个组件</p><h2 id="定义组件类型-types" tabindex="-1"><a class="header-anchor" href="#定义组件类型-types" aria-hidden="true">#</a> 定义组件类型（types）</h2><p>MiYa Design 的所有组件必须要有良好的类型支持，所以组件中的类型定义必须放在第一位。所有组件的类型定义都放在 <code>types</code> 目录下，每个组件需要在 <code>types</code> 下新建一个目录用于存放该组件所需要的类型，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├─ components
│  ├─ types
│  │  └─ hot-zone
│  │     ├─ HotZoneItem.ts
│  │     ├─ Pos.ts
│  │     ├─ ResizeDirection.ts
│  │     ├─ ZoneRect.ts
│  │     └─ index.ts
│  └─ types.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">避免类型重名</p><p>我们要暴露给用户的类型必须以组件名为前缀进行定义，防止类型重名，比如 <code>HotZont</code> + <code>Item</code></p></div><p>类型定义好之后，在 <code>hot-zone</code> 目录下再创建一个 <code>index.ts</code> 文件，该文件中主要导出需要暴露给用户的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./HotZoneItem&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">并不是所有的类型都需要导出</p><p>通过上面的结构我们可以看到 <code>hot-zone</code> 组件其实定义了很多类型，但是我们只导出了其中的一个，因为大部分组件内部使用的类型不需要暴露给用户，所以在开发组件的时候需要设计并考虑清楚</p></div><p>以上都完成之后，我们还需要在最外层的 <code>types.ts</code> 文件中导出需要暴露给用户的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./types/hot-zone&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这一步，用户在使用组件的类型时，就非常方便，只需要：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">type</span> <span class="token class-name">HotZoneItem</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;miya-design/types&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以我们就需要格外注意，类型的命名不要重复</p><h2 id="创建组件" tabindex="-1"><a class="header-anchor" href="#创建组件" aria-hidden="true">#</a> 创建组件</h2><p>定义好类型之后，我们就可以编写具体的组件了。新创建的组件需要在 <code>components</code> 目录下新建一个文件夹，该组件的所有模板文件（.vue）都将放在此文件下，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├─ components
│  ├─ hot-zone
│  │  └─ HotZone.vue
├─ components.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>热区组件</code> 的模板文件就定义在 <code>hot-zone</code> 目录下。组件编写完成之后，在最外层的 <code>components.ts</code> 中进行导出：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> HotZone <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./hot-zone/HotZone.vue&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之所以要统一放在该文件中进行导出，是因为我们对最外层的 <code>index.ts</code> 做了封装：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> components <span class="token keyword">from</span> <span class="token string">&#39;./components&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./components&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>components<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> components<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> install <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>index.ts</code> 文件中是组件导出的核心逻辑，为了防止频繁修改而导致出错，所以组件的导出统一定义在了 <code>components.ts</code> 中。</p><h2 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h2>`,27),r={href:"https://pnpm.io/workspaces",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"tests",-1),k=s("code",null,"retail-test",-1),v=s("code",null,"tests",-1),m=a(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> HotZone <span class="token keyword">from</span> <span class="token string">&#39;miya-design-dev/components/hot-zone/HotZone.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> type HotZoneItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;miya-design-dev/components/types&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token literal-property property">zones</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Array<span class="token operator">&lt;</span>HotZoneItem<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HotZone</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>imageUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>zones</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zones<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hot-zone<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们可以直接引用在 <code>packages</code> 中定义的 <code>HotZone</code>，这样就可以非常方便地进行调试</p>`,2);function b(g,h){const e=o("ExternalLinkIcon");return p(),c("div",null,[d,s("p",null,[n("在组件开发的过程中，我们还需要进行实时预览和调试。由于我们整个架构是采用 "),s("a",r,[n("monorepo"),i(e)]),n(" 的方式进行构建的，所以我们可以在测试工程（"),u,n("、"),k,n("）下面直接引入，比如在 "),v,n(" 目录下的 App.vue 中：")]),m])}const f=t(l,[["render",b],["__file","develop.html.vue"]]);export{f as default};
