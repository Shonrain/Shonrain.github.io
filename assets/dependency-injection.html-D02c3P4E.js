import{_ as s,c as a,a as e,o as p}from"./app-B2I_ZL3S.js";const l={};function t(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 class="blog-title">Play! Framework 系列（三）：依赖注入</h2><p>在<a href="http://shawdubie.com/notes/architecture-of-play" target="_blank" rel="noopener noreferrer">Play! Framework 系列（二）</a>中我们介绍了 Play 的项目结构。在日常处理业务逻辑的时候，我们都会用到依赖注入，本文将介绍一下 Play! 中的依赖注入以及如何合理地去使用她。</p><h2 id="为什么要使用「依赖注入」" tabindex="-1"><a class="header-anchor" href="#为什么要使用「依赖注入」"><span>为什么要使用「依赖注入」</span></a></h2><p>在许多 Java 框架中，「依赖注入」早已不是一个陌生的技术，Play 框架从 2.4 开始推荐使用 <a href="https://github.com/google/guice" target="_blank" rel="noopener noreferrer">Guice</a> 来作为依赖注入。</p><p>采用依赖注入最大的好处就是为了「解耦」，举个栗子：</p><p>在<a href="http://shawdubie.com/notes/architecture-of-play" target="_blank" rel="noopener noreferrer">上一篇</a>文章的例子中，我们实现了一个 EmployeeService 用来对公司的员工进行操作：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">services</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">models<span class="token punctuation">.</span></span>_</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> EmployeeSerivce<span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在之前的实现中，我们没有加入数据库的操作，那么现在我们想要引入一个数据库连接的类：DatabaseAccessService 来对数据库进行连接以便我们对相应的数据库表进行操作，则：</p><p>新建一个数据库连接操作的 Service：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">services</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> DatabaseAccessService<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EmployeeSerivce 需要依赖 DatabaseAccessService：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">services</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">models<span class="token punctuation">.</span></span>_</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> EmployeeSerivce<span class="token punctuation">(</span>db<span class="token operator">:</span> DBService<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，现在我们需要在 EmployeeController 中使用 EmployeeSerivce，如果不采用依赖注入，则：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">class</span> EmployeeController <span class="token annotation punctuation">@Inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span></span>
<span class="line">  cc<span class="token operator">:</span> ControllerComponents</span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">extends</span> AbstractController<span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> db <span class="token operator">=</span> <span class="token keyword">new</span> DatabaseAccessService<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">val</span> employeeSerivce <span class="token operator">=</span> <span class="token keyword">new</span> EmployeeSerivce<span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> employeeList <span class="token operator">=</span> Action <span class="token punctuation">{</span> <span class="token keyword">implicit</span> request<span class="token operator">:</span> Request<span class="token punctuation">[</span>AnyContent<span class="token punctuation">]</span> <span class="token keyword">=&gt;</span></span>
<span class="line">    <span class="token keyword">val</span> employees <span class="token operator">=</span> employeeSerivce<span class="token punctuation">.</span>getEmployees<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    Ok<span class="token punctuation">(</span>views<span class="token punctuation">.</span>html<span class="token punctuation">.</span>employeeList<span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，为了实例化 EmployeeSerivce，DatabaseAccessService 也需要实例化，如果随着需求的增加，EmployeeSerivce 所需要依赖的东西增加，那么我们每次实例化 EmployeeSerivce 的时候都需要将她的依赖也实例化一遍，而且她的依赖也有可能会依赖其他东西，这样就使得我们的代码变得非常冗余，也极难维护。</p><p>为了解决这一问题，我们引入了依赖注入，Play支持两种方式的依赖注入，分别是：「运行时依赖注入」以及「编译时依赖注入」，接下来我们就通过这两种依赖注入来解决我们上面提出的问题。</p><h2 id="运行时依赖注入-runtime-dependency" tabindex="-1"><a class="header-anchor" href="#运行时依赖注入-runtime-dependency"><span>运行时依赖注入（runtime dependency）</span></a></h2><p>Play 的运行时依赖注入默认采用 <a href="https://github.com/google/guice" target="_blank" rel="noopener noreferrer">Guice</a>，关于 Guice，我们后面的文章当中会介绍，这里只需要知道她。为了支持 Guice 以及其他的运行时依赖注入框架，Play 提供了大量的内置组件。详见 <a href="https://www.playframework.com/documentation/2.6.x/api/scala/index.html#play.api.inject.package" target="_blank" rel="noopener noreferrer">play.api.inject</a>。</p><p>那么在 Play 中我们将如何使用这种依赖注入呢？回到我们文章刚开始讲的那个栗子中，现在我们通过依赖注入的方式来重新组织我们的代码：</p><p>首先 EmployeeSerivce 需要依赖 DatabaseAccessService，这里其实就存在一个「依赖注入」，那我们这样去实现：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">services</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">models<span class="token punctuation">.</span></span>_</span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span>_</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> EmployeeSerivce <span class="token annotation punctuation">@Inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>db<span class="token operator">:</span> DBService<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们引入了 <code>import javax.inject._</code>，并且可以看到多了一个 <code>@Inject()</code> 注解，我们实现运行时依赖注入就采用该注解。</p><p>那么在 EmployeeController 中，我们的代码就变成了：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">class</span> EmployeeController <span class="token annotation punctuation">@Inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span></span>
<span class="line">  employeeSerivce<span class="token operator">:</span> EmployeeSerivce<span class="token punctuation">,</span></span>
<span class="line">  cc<span class="token operator">:</span> ControllerComponents</span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">extends</span> AbstractController<span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> employeeList <span class="token operator">=</span> Action <span class="token punctuation">{</span> <span class="token keyword">implicit</span> request<span class="token operator">:</span> Request<span class="token punctuation">[</span>AnyContent<span class="token punctuation">]</span> <span class="token keyword">=&gt;</span></span>
<span class="line">    <span class="token keyword">val</span> employees <span class="token operator">=</span> employeeSerivce<span class="token punctuation">.</span>getEmployees<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    Ok<span class="token punctuation">(</span>views<span class="token punctuation">.</span>html<span class="token punctuation">.</span>employeeList<span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们不需要再去写那么多的实例了，我们只要在需要某种依赖的地方声明一下我们需要什么样的依赖， Play 在运行时就会将我们需要的依赖注入到相应的组件中去。</p><p>tip：<code>@Inject</code> 必须放在类名的后面，构造参数的前面。</p><p>「运行时依赖注入」，顾名思义就是在程序运行的时候进行依赖注入，但是她不能在编译时进行校验，为了能让程序在编译时就能实现对依赖注入的校验， Play支持了「编译时依赖注入」。</p><h2 id="编译时依赖注入-compile-time-dependency-injection" tabindex="-1"><a class="header-anchor" href="#编译时依赖注入-compile-time-dependency-injection"><span>编译时依赖注入（compile time dependency injection）</span></a></h2><p>为了实现编译时依赖注入，我们需要知道 Play 提供的一个特质：<a href="https://www.playframework.com/documentation/2.6.x/api/scala/index.html#play.api.ApplicationLoader" target="_blank" rel="noopener noreferrer">ApplicationLoader</a>，该特质中的 load 方法将会在程序启动的时候加载我们的应用程序，在这个过程中，Play 框架本身以及我们自己的程序代码所依赖的东西都会被实例化。</p><p>默认情况下，Play 提供了一个 Guice 模块，该模块下的 GuiceApplicationBuilder 会根据 Play 框架给定的 context 去将该程序所依赖的所有组件联系在一起。</p><p>如果我们要自定义 ApplicationLoader，我们也需要一个像 GuiceApplicationBuilder 的东西，好在 Play 提供了这么一个东西，那就是：<a href="https://www.playframework.com/documentation/2.6.x/api/scala/index.html#play.api.ApplicationLoader$$Context" target="_blank" rel="noopener noreferrer">BuiltInComponentsFromContext</a>，我们可以通过继承这个类来实现我们自己的 ApplicationLoader。</p><p>接下来我们通过相应的代码来作进一步的解释：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token namespace">controllers<span class="token punctuation">.</span></span>_</span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">play<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span>_</span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">play<span class="token punctuation">.</span>api<span class="token punctuation">.</span>routing<span class="token punctuation">.</span></span>Router</span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">services<span class="token punctuation">.</span></span>_</span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">router<span class="token punctuation">.</span></span>Routes</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">//自定义 ApplicationLoader</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> MyApplicationLoader <span class="token keyword">extends</span> ApplicationLoader <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> load<span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> Application <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">new</span> MyComponents<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>application</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> MyComponents<span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">extends</span> BuiltInComponentsFromContext<span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token namespace">play<span class="token punctuation">.</span>filters<span class="token punctuation">.</span></span>HttpFiltersComponents <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">lazy</span> <span class="token keyword">val</span> databaseAccessService <span class="token operator">=</span> <span class="token keyword">new</span> DatabaseAccessService</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">lazy</span> <span class="token keyword">val</span> employeeSerivce <span class="token operator">=</span> <span class="token keyword">new</span> EmployeeSerivce<span class="token punctuation">(</span>databaseAccessService<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">lazy</span> <span class="token keyword">val</span> employeeController <span class="token operator">=</span> <span class="token keyword">new</span> EmployeeController<span class="token punctuation">(</span>employeeSerivce<span class="token punctuation">,</span> controllerComponents<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">lazy</span> <span class="token keyword">val</span> router<span class="token operator">:</span> Router <span class="token operator">=</span> <span class="token keyword">new</span> Routes<span class="token punctuation">(</span>httpErrorHandler<span class="token punctuation">,</span> employeeController<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过继承 BuiltInComponentsFromContext 使得程序能够根据 Play 所提供的 context 来加载 Play 框架本身所需要的一些组件。</p><p>那么回到我们的「编译时的依赖注入」中来，可以看到在 class MyComponents 中，我们将所有的 service 都实例化了，并且将这些实例注入到相应的依赖她们的模块中：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">//将两个 service 实例化</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">lazy</span> <span class="token keyword">val</span> databaseAccessService <span class="token operator">=</span> <span class="token keyword">new</span> DatabaseAccessService</span>
<span class="line"></span>
<span class="line"><span class="token comment">//EmployeeSerivce 依赖 DatabaseAccessService，将实例 databaseAccessService 注入其中</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">lazy</span> <span class="token keyword">val</span> employeeSerivce <span class="token operator">=</span> <span class="token keyword">new</span> EmployeeSerivce<span class="token punctuation">(</span>databaseAccessService<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//将 employeeSerivce 注入到 employeeController 中</span></span>
<span class="line"><span class="token keyword">lazy</span> <span class="token keyword">val</span> employeeController <span class="token operator">=</span> <span class="token keyword">new</span> EmployeeController<span class="token punctuation">(</span>employeeSerivce<span class="token punctuation">,</span> controllerComponents<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 BuiltInComponentsFromContext 时，我们需要自己实现一下 router：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">lazy</span> <span class="token keyword">val</span> router<span class="token operator">:</span> Router <span class="token operator">=</span> <span class="token keyword">new</span> Routes<span class="token punctuation">(</span>httpErrorHandler<span class="token punctuation">,</span> employeeController<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>tip：需要注意的是，如果我们实现了自己的 ApplicationLoader，我们需要在 <code>application.conf</code> 文件中声明一下：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"></span>
<span class="line">play<span class="token punctuation">.</span>application<span class="token punctuation">.</span>loader <span class="token operator">=</span> MyApplicationLoader</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过自定义 ApplicationLoader 我们就实现了编译时期的依赖注入，那么 EmployeeSerivce 就变成了：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">package</span> <span class="token namespace">services</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">models<span class="token punctuation">.</span></span>_</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> EmployeeSerivce <span class="token punctuation">(</span>db<span class="token operator">:</span> DBService<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到， 这里就省去了 <code>@Inject()</code> 注解。</p><p>同样的，对于 EmployeeController：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">package</span> <span class="token namespace">controllers</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">play<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span>_</span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">play<span class="token punctuation">.</span>api<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span></span>_</span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">models<span class="token punctuation">.</span></span>_</span>
<span class="line"><span class="token keyword">import</span> <span class="token namespace">services<span class="token punctuation">.</span></span>_</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 没有了 @Inject() 注解</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> EmployeeController <span class="token punctuation">(</span></span>
<span class="line">  employeeSerivce<span class="token operator">:</span> EmployeeSerivce<span class="token punctuation">,</span></span>
<span class="line">  cc<span class="token operator">:</span> ControllerComponents</span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">extends</span> AbstractController<span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用编译时期的依赖注入，我们只需要在将所有的依赖实例化一次就够了，并且使用这种方式，我们能够在编译时期就能发现程序的一些异常。同样的，使用该方法也会有一些问题，就是我们需要写许多样板代码。另外本文的编译时期的依赖注入完全是自己手动注入的，看上去也比较繁琐，不是那么直观，如果要使用更优雅的方式，我们可以使用 <a href="https://github.com/adamw/macwire" target="_blank" rel="noopener noreferrer">macwire</a>，这个我们在后面的文章中会详细讲解。</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>本文简单介绍了一下 Play 支持的两种依赖注入的模式，文中提到的一些第三方依赖注入的框架我们会在后面的文章中详细介绍。本文的例子请戳<a href="https://github.com/Shonrain/Play-Demo/tree/master/play-demo-2" target="_blank" rel="noopener noreferrer">源码链接</a></p>`,48)]))}const o=s(l,[["render",t],["__file","dependency-injection.html.vue"]]),r=JSON.parse('{"path":"/play/dependency-injection.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"为什么要使用「依赖注入」","slug":"为什么要使用「依赖注入」","link":"#为什么要使用「依赖注入」","children":[]},{"level":2,"title":"运行时依赖注入（runtime dependency）","slug":"运行时依赖注入-runtime-dependency","link":"#运行时依赖注入-runtime-dependency","children":[]},{"level":2,"title":"编译时依赖注入（compile time dependency injection）","slug":"编译时依赖注入-compile-time-dependency-injection","link":"#编译时依赖注入-compile-time-dependency-injection","children":[]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]}],"git":{},"filePathRelative":"play/dependency-injection.md","excerpt":"<h2 class=\\"blog-title\\">Play! Framework 系列（三）：依赖注入</h2>\\n<p>在<a href=\\"http://shawdubie.com/notes/architecture-of-play\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Play! Framework 系列（二）</a>中我们介绍了 Play 的项目结构。在日常处理业务逻辑的时候，我们都会用到依赖注入，本文将介绍一下 Play! 中的依赖注入以及如何合理地去使用她。</p>\\n<h2>为什么要使用「依赖注入」</h2>\\n<p>在许多 Java 框架中，「依赖注入」早已不是一个陌生的技术，Play 框架从 2.4 开始推荐使用 <a href=\\"https://github.com/google/guice\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Guice</a> 来作为依赖注入。</p>"}');export{o as comp,r as data};
