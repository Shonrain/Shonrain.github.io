import{_ as o,c as l,a as s,d as a,o as c,r as t}from"./app-B2I_ZL3S.js";const i={};function u(r,n){const p=t("compiler-demo"),e=t("parse-progress");return c(),l("div",null,[n[0]||(n[0]=s(`<h2 class="blog-title">Template Compiler in Vue</h2><p><img src="http://hh-oss-picture.miyapay.com/box/8932fae91c04d5b9b928ee0671c72254.png" alt=""></p><h3 id="template-vnode" tabindex="-1"><a class="header-anchor" href="#template-vnode"><span>Template &amp; Vnode</span></a></h3><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Text1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Text2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),a(p),n[1]||(n[1]=s(`<h3 id="gpl-dsl" tabindex="-1"><a class="header-anchor" href="#gpl-dsl"><span>GPL &amp; DSL</span></a></h3><h6 id="_1-gpl-general-purpose-language" tabindex="-1"><a class="header-anchor" href="#_1-gpl-general-purpose-language"><span>1. GPL: General Purpose Language</span></a></h6><ul><li><code>Java</code>、<code>JavaScript</code>、<code>C</code> ...</li></ul><h6 id="_2-dsl-domain-specific-language" tabindex="-1"><a class="header-anchor" href="#_2-dsl-domain-specific-language"><span>2. DSL: Domain Specific Language</span></a></h6><ul><li><code>JSON</code>、<code>SQL</code>、<code>HTML</code>、<code>CSS</code>、<code>Vue</code> ...</li></ul><h3 id="gpl-compiler" tabindex="-1"><a class="header-anchor" href="#gpl-compiler"><span>GPL Compiler</span></a></h3><p><img src="http://hh-oss-picture.miyapay.com/box/c29e0231fff43898ee9574e2fe99d6de.png" alt=""></p><h3 id="template-compiler" tabindex="-1"><a class="header-anchor" href="#template-compiler"><span>Template Compiler</span></a></h3><p><img src="http://hh-oss-picture.miyapay.com/box/274352efb9877102d1ac940a724d7982.png" alt=""></p><details class="hint-container details"><summary>compiler code</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">compiler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// parse template to template AST</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> tplAst <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// transform 「template AST」to JavaScript AST</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> jsAst <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span>tplAst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// generate render code</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>jsAst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> render<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="parse" tabindex="-1"><a class="header-anchor" href="#parse"><span>parse</span></a></h3><p><img src="http://hh-oss-picture.miyapay.com/box/01a08ec87a1c6d46faeb594d70efcf2f.png" alt=""></p><h4 id="ast-abstract-syntax-tree" tabindex="-1"><a class="header-anchor" href="#ast-abstract-syntax-tree"><span>AST(Abstract Syntax Tree)</span></a></h4><details class="hint-container details"><summary>template</summary><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Text1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Text2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><img src="http://hh-oss-picture.miyapay.com/box/809aaba0ad9e45da95d13d22dbc10931.png" alt=""></p><details class="hint-container details"><summary>template AST</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ROOT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// root node</span></span>
<span class="line">  <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ELEMENT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// tag/element node</span></span>
<span class="line">      <span class="token string-property property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ELEMENT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// tag/element node</span></span>
<span class="line">          <span class="token string-property property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">              <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// text node</span></span>
<span class="line">              <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Text1&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ELEMENT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// tag/element node</span></span>
<span class="line">          <span class="token string-property property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span></span>
<span class="line">          <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">              <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">,</span> <span class="token comment">// text node</span></span>
<span class="line">              <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Text2&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Element node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span>RCDATA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line">      RAWTEXT</span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    {{ Interpolation }}</span>
<span class="line">    Text</span>
<span class="line">    <span class="token comment">&lt;!-- comment --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://hh-oss-picture.miyapay.com/box/ac48aceeeed74dd421e7afd6ea254a8e.png" alt=""></p><details class="hint-container details"><summary>interface TplAst</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> <span class="token constant">TYPE</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">ROOT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">ELEMENT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">COMMENT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">TEXT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TplAst</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">;</span></span>
<span class="line">  tag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  content<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="inspired-by-whatwg" tabindex="-1"><a class="header-anchor" href="#inspired-by-whatwg"><span>Inspired by <a href="https://html.spec.whatwg.org/#toc-syntax" target="_blank" rel="noopener noreferrer">WHATWG</a></span></a></h4><ul><li><a href="https://html.spec.whatwg.org/#data-state" target="_blank" rel="noopener noreferrer">DATA</a></li><li><a href="https://html.spec.whatwg.org/#rcdata-state" target="_blank" rel="noopener noreferrer">RCDATA</a></li><li><a href="https://html.spec.whatwg.org/#rawtext-state" target="_blank" rel="noopener noreferrer">RAWTEXT</a></li></ul><details class="hint-container details"><summary>define parse</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parse <span class="token operator">=</span> <span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> TplAst <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> consumeSpace <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">consumeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">,</span></span>
<span class="line">    children<span class="token operator">:</span> nodes</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>Context</span></a></h4><details class="hint-container details"><summary>interface Context</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> <span class="token constant">MODE</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">DATA</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RCDATA</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RAWTEXT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">CDATA</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span></span>
<span class="line">  source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// current template string</span></span>
<span class="line">  mode<span class="token operator">:</span> <span class="token constant">MODE</span><span class="token punctuation">;</span> <span class="token comment">// current mode</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">consume</span><span class="token operator">:</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// consume character</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">consumeSpace</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// consume blank character</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="parsechildren" tabindex="-1"><a class="header-anchor" href="#parsechildren"><span>parseChildren</span></a></h4><details class="hint-container details"><summary>define parseChildren</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> parseChildren <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  context<span class="token operator">:</span> Context<span class="token punctuation">,</span></span>
<span class="line">  ancestors<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> nodes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">switch</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token operator">:</span> node <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token operator">:</span> node <span class="token operator">=</span> <span class="token function">parseComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span> node <span class="token operator">=</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line highlighted">      <span class="token keyword">case</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span> node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> nodes<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="parseelement" tabindex="-1"><a class="header-anchor" href="#parseelement"><span>parseElement</span></a></h5><details class="hint-container details"><summary>define parseElement</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">parseElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> ancestors<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// parse start tag</span></span>
<span class="line">  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// parse children</span></span>
<span class="line">  element<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// parse end tag</span></span>
<span class="line">  <span class="token function">parseEndTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,28)),a(e),n[2]||(n[2]=s(`<h5 id="isend" tabindex="-1"><a class="header-anchor" href="#isend"><span>isEnd</span></a></h5><details class="hint-container details"><summary>define isEnd</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> isEnd <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> ancestors<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> ancestors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ancestors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2)),a(p,{"is-parse":!0}),n[3]||(n[3]=s(`<h3 id="transform" tabindex="-1"><a class="header-anchor" href="#transform"><span>Transform</span></a></h3><p><img src="http://hh-oss-picture.miyapay.com/box/d14cd22b2ba1e00f499b65b3492500b1.png" alt=""></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">transform</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  ast<span class="token operator">:</span> TplAst<span class="token punctuation">,</span></span>
<span class="line">  plugins<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>currentNode<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token function">traverseNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="traverse-node" tabindex="-1"><a class="header-anchor" href="#traverse-node"><span>Traverse Node</span></a></h4><details class="hint-container details"><summary>define traverseNode</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">traverseNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ast<span class="token operator">:</span> TplAst<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> currentNode <span class="token operator">=</span> ast<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> children <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// handle currentNode</span></span>
<span class="line">  <span class="token comment">//------------------------------------------</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> tag <span class="token punctuation">}</span> <span class="token operator">=</span> currentNode<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span> tag <span class="token operator">===</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    currentNode<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    currentNode<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&quot;Morris is an idiot&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// more todos can put here</span></span>
<span class="line">  <span class="token comment">//------------------------------------------</span></span>
<span class="line"></span>
<span class="line">  children <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="plugin-architecture" tabindex="-1"><a class="header-anchor" href="#plugin-architecture"><span>Plugin Architecture</span></a></h4><details class="hint-container details"><summary>interface Context</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span></span>
<span class="line">  currentNode<span class="token operator">:</span> TplAst <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  childIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// index of currentNode in parent</span></span>
<span class="line"></span>
<span class="line">  parent<span class="token operator">:</span> TplAst <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// parent of currentNode</span></span>
<span class="line"></span>
<span class="line highlighted">  plugins<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>currentNode<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>traverseNode with plugins</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">traverseNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ast<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> ast<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">  <span class="token keyword">const</span> plugins <span class="token operator">=</span> context<span class="token punctuation">.</span>plugins<span class="token punctuation">;</span></span>
<span class="line highlighted">  plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> children <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      context<span class="token punctuation">.</span>parent <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token punctuation">;</span></span>
<span class="line">      context<span class="token punctuation">.</span>childIndex <span class="token operator">=</span> index<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">traverseNode</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="enter-exit" tabindex="-1"><a class="header-anchor" href="#enter-exit"><span>Enter &amp; Exit</span></a></h4><p><img src="http://hh-oss-picture.miyapay.com/box/68df4a864022ce2bd17a85f437718049.png" alt=""></p><div class="hint-container warning"><p class="hint-container-title">shortcomings</p><ul><li>currentNode\`s parent has been handled</li><li>can\`t go back to handle parent</li></ul></div><p><img src="http://hh-oss-picture.miyapay.com/box/dbd7e1368620897d5f59712fbebc06c6.png" alt=""></p><ul><li><strong>Enter：enter parent first, then to child</strong></li><li><strong>Exit：exit child first, then to parent</strong></li></ul><details class="hint-container details"><summary>final traverseNode</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">traverseNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ast<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> ast<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> exitFns<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> plugins <span class="token operator">=</span> context<span class="token punctuation">.</span>plugins<span class="token punctuation">;</span></span>
<span class="line">  plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> onExit <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>onExit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// save exit functions</span></span>
<span class="line">      exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> children <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      context<span class="token punctuation">.</span>parent <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token punctuation">;</span></span>
<span class="line">      context<span class="token punctuation">.</span>childIndex <span class="token operator">=</span> index<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">traverseNode</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// handle exit functions</span></span>
<span class="line">  <span class="token keyword">let</span> i <span class="token operator">=</span> exitFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    exitFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">handleText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&quot;Morris is an idiot&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="javascript-ast" tabindex="-1"><a class="header-anchor" href="#javascript-ast"><span>Javascript AST</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>declaration：<code>function</code></strong></p></li><li><p><strong>Identifier：<code>render</code></strong></p></li><li><p><strong>body：<code>{...}</code></strong></p></li><li><p><strong>return：<code>h(&quot;div&quot;, [h(&quot;p&quot;, &quot;Text1&quot;), h(&quot;p&quot;, &quot;Text2&quot;)])</code></strong></p></li><li><p><strong>arguments：<code>&quot;div&quot;, [h(&quot;p&quot;, &quot;Text1&quot;), h(&quot;p&quot;, &quot;Text2&quot;)</code></strong></p></li></ul><details class="hint-container details"><summary>Javascript AST</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;FUNC&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;render&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;RETURN&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&quot;returnExpress&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CALL&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;arguments&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;div&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;ARRAY&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;elements&quot;</span><span class="token operator">:</span></span>
<span class="line">            <span class="token punctuation">[</span></span>
<span class="line">              <span class="token punctuation">{</span> </span>
<span class="line">                <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;CALL&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;arguments&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token punctuation">[</span></span>
<span class="line">                  <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;p&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;Text1&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">]</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">{</span></span>
<span class="line">                <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CALL&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;arguments&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token punctuation">[</span></span>
<span class="line">                  <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;p&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;STRING&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;Text2&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">]</span></span>
<span class="line">              <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">]</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>interface JsAst</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> <span class="token constant">TYPE</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">FUNC</span> <span class="token operator">=</span> <span class="token string">&#39;FUNC&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token constant">STRING</span> <span class="token operator">=</span> <span class="token string">&#39;STRING&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">ARRAY</span> <span class="token operator">=</span> <span class="token string">&quot;ARRAY&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">CALL</span> <span class="token operator">=</span> <span class="token string">&#39;CALL&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RETURN</span> <span class="token operator">=</span> <span class="token string">&#39;RETURN&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">JsAst</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">,</span></span>
<span class="line">  value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  params<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  body<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  arguments<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  elements<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  returnExpress<span class="token operator">?</span><span class="token operator">:</span> JsAst<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="jsnode" tabindex="-1"><a class="header-anchor" href="#jsnode"><span>jsNode</span></a></h5><details class="hint-container details"><summary>interface TplAST</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TplAst</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">,</span></span>
<span class="line">  tag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  isSelfClosing<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span></span>
<span class="line">  props<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  content<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Content<span class="token punctuation">,</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TplAst<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line highlighted">  jsNode<span class="token operator">?</span><span class="token operator">:</span> JsAst<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><img src="http://hh-oss-picture.miyapay.com/box/676e701ea3793046f58fd73dabd571c3.png" alt=""></p><h5 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins"><span>Plugins</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token punctuation">[</span>transformText<span class="token punctuation">,</span> transRender<span class="token punctuation">,</span> transformElement<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">transform</span><span class="token punctuation">(</span>tplAst<span class="token punctuation">,</span> plugins<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>tool functions</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> newString <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> JsAst <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span></span>
<span class="line">  value<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> newArray <span class="token operator">=</span> <span class="token punctuation">(</span>elements<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> JsAst <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">ARRAY</span><span class="token punctuation">,</span></span>
<span class="line">  elements<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> newCall <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> JsAst <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">CALL</span><span class="token punctuation">,</span></span>
<span class="line">  value<span class="token punctuation">,</span></span>
<span class="line">  arguments<span class="token operator">:</span> args<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> newReturn <span class="token operator">=</span> <span class="token punctuation">(</span>returnExpress<span class="token operator">?</span><span class="token operator">:</span> JsAst<span class="token punctuation">)</span><span class="token operator">:</span> JsAst <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">RETURN</span><span class="token punctuation">,</span></span>
<span class="line">  returnExpress<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">newFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">TYPE</span><span class="token punctuation">.</span><span class="token constant">FUNC</span><span class="token punctuation">,</span></span>
<span class="line">  body<span class="token punctuation">,</span></span>
<span class="line">  value<span class="token punctuation">,</span></span>
<span class="line">  params<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>transformText</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">transformText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token constant">TPL_AST_TYPE</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> <span class="token function">newString</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content <span class="token keyword">as</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>transformElement</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">transformElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TPL_AST_TYPE</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// eg: h(&#39;div&#39;)</span></span>
<span class="line">      <span class="token keyword">const</span> callExp <span class="token operator">=</span> <span class="token function">newCall</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">newString</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// set arguments, eg: h(tag, arguments)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> args <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> _<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>JsAst<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">        callExp<span class="token punctuation">.</span>arguments <span class="token operator">?</span> callExp<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">newArray</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> callExp<span class="token punctuation">.</span>arguments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">newArray</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> callExp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>transRender</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">transRender</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> TplAst<span class="token punctuation">,</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TPL_AST_TYPE</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> jsAst <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jsNode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token function">newReturn</span><span class="token punctuation">(</span>jsAst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> <span class="token function">newFunc</span><span class="token punctuation">(</span><span class="token string">&#39;render&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,28)),a(p,{"is-transform":!0}),n[4]||(n[4]=s(`<h3 id="generate" tabindex="-1"><a class="header-anchor" href="#generate"><span>Generate</span></a></h3><p><img src="http://hh-oss-picture.miyapay.com/box/10abeb84b9ddc80f58a69222a3b78741.png" alt=""></p><h4 id="context-1" tabindex="-1"><a class="header-anchor" href="#context-1"><span>Context</span></a></h4><details class="hint-container details"><summary>interface Context</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span></span>
<span class="line">  code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  currentIndent<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> currentIndent<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndent <span class="token operator">=</span> currentIndent<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">+=</span> code<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">newLine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;  &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentIndent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">indent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndent<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">deIndent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndent<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><img src="http://hh-oss-picture.miyapay.com/box/f470f0200ff763ab9e2a8b2186f0b4d2.png" alt=""></p>`,5))])}const d=o(i,[["render",u],["__file","compile-in-vue-share.html.vue"]]),v=JSON.parse('{"path":"/share/compile-in-vue-share.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Template & Vnode","slug":"template-vnode","link":"#template-vnode","children":[]},{"level":3,"title":"GPL & DSL","slug":"gpl-dsl","link":"#gpl-dsl","children":[]},{"level":3,"title":"GPL Compiler","slug":"gpl-compiler","link":"#gpl-compiler","children":[]},{"level":3,"title":"Template Compiler","slug":"template-compiler","link":"#template-compiler","children":[]},{"level":3,"title":"parse","slug":"parse","link":"#parse","children":[]},{"level":3,"title":"Transform","slug":"transform","link":"#transform","children":[]},{"level":3,"title":"Generate","slug":"generate","link":"#generate","children":[]}],"git":{},"filePathRelative":"share/compile-in-vue-share.md","excerpt":"<h2 class=\\"blog-title\\">Template Compiler in Vue</h2>\\n<p><img src=\\"http://hh-oss-picture.miyapay.com/box/8932fae91c04d5b9b928ee0671c72254.png\\" alt=\\"\\"></p>\\n<h3>Template &amp; Vnode</h3>\\n<div class=\\"language-vue line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"vue\\" data-title=\\"vue\\"><pre><code><span class=\\"line\\"><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>template</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"line\\">  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"line\\">    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Text1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"line\\">    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Text2<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"line\\">  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"line\\"><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>template</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{d as comp,v as data};
