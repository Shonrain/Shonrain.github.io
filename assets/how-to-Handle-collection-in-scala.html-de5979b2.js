import{_ as p,r as e,o,c,d as n,e as a,a as t,b as l}from"./app-fcfb95bc.js";const u="/miya-design/assets/collections-ed4c78ad.png",i="/miya-design/assets/collections.mutable-5539281c.png",k="/miya-design/assets/collections.immutable-a00bd64b.png",r={},d=l('<h2 class="blog-title">如何在 Scala 中科学地操作 collection（一）：集合类型与操作</h2><p>在日常项目开发中，我们几乎都会用到Scala中的集合以及一些集合操作。由于 Scala 中的集合操作灵活多变，对于刚接触Scala的开发者，在选用何种集合以及使用何种集合操作就显得不那么合理了，虽然大部分时候都可以解决问题，但是有时候并没有选择最优的方式。科学合理地操作Scala中的集合可以使我们的代码变得更加简洁和高效。</p><h2 id="mutable-和-immutable-集合" tabindex="-1"><a class="header-anchor" href="#mutable-和-immutable-集合" aria-hidden="true">#</a> Mutable 和 Immutable 集合</h2><p>Scala 集合类系统地区分了可变的和不可变的集合。</p><h3 id="scala-collection-包中所有的集合类" tabindex="-1"><a class="header-anchor" href="#scala-collection-包中所有的集合类" aria-hidden="true">#</a> scala.collection 包中所有的集合类</h3><p><img src="'+u+'" alt="Image of collections"></p><h3 id="scala-collection-mutable-中的所有集合类" tabindex="-1"><a class="header-anchor" href="#scala-collection-mutable-中的所有集合类" aria-hidden="true">#</a> scala.collection.mutable 中的所有集合类</h3><p><code>可变集合</code>，顾名思义，意味着你可以修改，移除或者添加一个元素。</p><p><img src="'+i+'" alt="Image of immutatble collection"></p><h3 id="scala-collection-immutable-中的所有集合类" tabindex="-1"><a class="header-anchor" href="#scala-collection-immutable-中的所有集合类" aria-hidden="true">#</a> scala.collection.immutable 中的所有集合类</h3><p><code>不可变集合</code>，相比<code>可变集合</code>，<code>不可变集合</code>永远不会被改变，但是你仍然可以像<code>可变集合</code>那样操作（修改，添加，删除某个集合元素）<code>不可变集合</code>，只是这些操作在每一种情况下都是返回一个新的集合，同时，原来的集合不会发生改变，由于此特性，<code>不可变集合</code>也是线程安全的，Scala在默认情况下采用的是<code>不可变集合</code>。所以在使用上，优先使用<code>不可变集合</code>。<code>不可变集</code>合适用于大多数情况。</p><p><img src="'+k+`" alt="Image of mutable collection"></p><h2 id="不同集合的使用场景" tabindex="-1"><a class="header-anchor" href="#不同集合的使用场景" aria-hidden="true">#</a> 不同集合的使用场景</h2><p>其中常用的集合有三种：<code>List</code>，<code>Set</code>，<code>Map</code>。</p><h3 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list" aria-hidden="true">#</a> 列表 List</h3><p><code>List</code> 继承至 <code>Seq</code>，集合中的元素是可以重复的。</p><p>e.g.</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code>scala<span class="token operator">&gt;</span> <span class="token keyword">val</span> l <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
l<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以当集合内的元素是可重复的时候，可以选择 <code>List</code> 或者 <code>Seq</code>。</p><h3 id="集-set" tabindex="-1"><a class="header-anchor" href="#集-set" aria-hidden="true">#</a> 集 Set</h3><p><code>Set</code> 中的元素是不可重复的。</p><p>e.g.</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code>scala<span class="token operator">&gt;</span> <span class="token keyword">val</span> s <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
s<span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>Set<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以当集合内的元素是不可重复的时候，选择 <code>Set</code>。</p><h3 id="映射-map" tabindex="-1"><a class="header-anchor" href="#映射-map" aria-hidden="true">#</a> 映射 Map</h3><p><code>Map</code> 中的元素呈现 <code>key -&gt; value</code> 的形式，其中第一个参数是映射的键，第二个参数是映射的值。且Map中每一个元素的键是唯一的。</p><p>e.g.</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code>scala<span class="token operator">&gt;</span> <span class="token keyword">val</span> m <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">-&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">-&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">-&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span>
m<span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>Map<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-&gt;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">-&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">-&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以当集合中的元素是 <code>key -&gt; value</code> 的形式且每个元素的键不重复的时候，选择 <code>Map</code>。</p><h2 id="集合中方法的使用" tabindex="-1"><a class="header-anchor" href="#集合中方法的使用" aria-hidden="true">#</a> 集合中方法的使用</h2><h3 id="各集合操作之间的比较" tabindex="-1"><a class="header-anchor" href="#各集合操作之间的比较" aria-hidden="true">#</a> 各集合操作之间的比较</h3><p>在开始介绍不同方法的使用场景之前，我们先对比一下不同方法操作同一集合所产出的结果有何异同。</p><ul><li><code>map</code>、<code>filter</code>、<code>collect</code> 的比较</li></ul><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">//定义一个列表</span>
scala<span class="token operator">&gt;</span> <span class="token keyword">val</span> l <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
l<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment">//map操作</span>
scala<span class="token operator">&gt;</span> l<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
res0<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment">//filter操作</span>
scala<span class="token operator">&gt;</span> l<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
res3<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment">//collect操作</span>
scala<span class="token operator">&gt;</span> l<span class="token punctuation">.</span>collect <span class="token punctuation">{</span><span class="token keyword">case</span> i <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span>
res1<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上结果对比我们可以看到：</p><p><code>map</code> 操作得到的集合，除了元素个数和原集合一样，其他都不一样。</p><p><code>filter</code> 操作得到的集合是原集合的子集。</p><p><code>collect</code> 操作得到的集合虽然和原集合不一样，但是仔细观察，可以看到 <code>collect</code> 操作得到的结果是 <code>map</code> 操作得到结果的子集，而且元素的个数和 <code>filter</code> 操作得到的集合元素个数相同。</p><ul><li><code>flatten</code> 和 <code>flatMap</code> 的比较</li></ul><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">//定义一个列表</span>
scala<span class="token operator">&gt;</span> <span class="token keyword">val</span> l <span class="token operator">=</span> List<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Seq<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
l<span class="token operator">:</span> List<span class="token punctuation">[</span>Seq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//flatten操作</span>
scala<span class="token operator">&gt;</span> l<span class="token punctuation">.</span>flatten
res5<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>

<span class="token comment">//flatMap操作</span>
scala<span class="token operator">&gt;</span> l<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>i <span class="token keyword">=&gt;</span> i<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
res6<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上结果我们可以看到，<code>flatten</code> 和 <code>flatMap</code> 都可可以将嵌套结构扁平化为一个层次的集合，但是：</p><p><code>flatten</code> 仅仅是将嵌套结构扁平化了，并没有改变原来集合内层列表中元素的值。</p><p><code>flatMap</code> 不仅将嵌套结构扁平化了，而且改变了原来集合内层列表中元素的值，其实 <code>flatMap</code> 就是在 <code>flatten</code> 之后再做一个 <code>map</code> 操作。</p><p>补充：以上操作返回的都是一个批量的结果，如果要查找某一特定元素，则可以采用类比的方法：</p><p><code>filter</code> -&gt; <code>find</code></p><p><code>collect</code> -&gt; <code>collectFirst</code></p><h3 id="不同方法的使用场景" tabindex="-1"><a class="header-anchor" href="#不同方法的使用场景" aria-hidden="true">#</a> 不同方法的使用场景</h3><p>通过以上对比，我们对集合中常用方法的操作结果有了一个大致的认识，接下来我们看看在不同场景下如何科学地选择相应的集合操作。</p><p>我们先定义一些将要在后面场景中使用的数据结构：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">case</span> <span class="token keyword">class</span> Student<span class="token punctuation">(</span>
  name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>
  sex<span class="token operator">:</span> <span class="token builtin">String</span>
<span class="token punctuation">)</span>
<span class="token keyword">val</span> jilen <span class="token operator">=</span> Student<span class="token punctuation">(</span>
  name <span class="token operator">=</span> <span class="token string">&quot;Jilen&quot;</span><span class="token punctuation">,</span>
  age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>
  sex <span class="token operator">=</span> <span class="token string">&quot;m&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">val</span> shaw <span class="token operator">=</span> Student<span class="token punctuation">(</span>
  name <span class="token operator">=</span> <span class="token string">&quot;Shaw&quot;</span><span class="token punctuation">,</span>
  age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span>
  sex <span class="token operator">=</span> <span class="token string">&quot;m&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">val</span> yison <span class="token operator">=</span> Student<span class="token punctuation">(</span>
  name <span class="token operator">=</span> <span class="token string">&quot;Yison&quot;</span><span class="token punctuation">,</span>
  age <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">,</span>
  sex <span class="token operator">=</span> <span class="token string">&quot;f&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">val</span> l <span class="token operator">=</span> List<span class="token punctuation">(</span>jilen<span class="token punctuation">,</span> shaw<span class="token punctuation">,</span> yison<span class="token punctuation">)</span>
l<span class="token operator">:</span> List<span class="token punctuation">[</span>Student<span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> Student<span class="token punctuation">(</span>Shaw<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> Student<span class="token punctuation">(</span>Yison<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，我们定义了一个学生组成的列表。</p><h4 id="场景一-我们要得到这些学生姓名所组成的列表" tabindex="-1"><a class="header-anchor" href="#场景一-我们要得到这些学生姓名所组成的列表" aria-hidden="true">#</a> 场景一：我们要得到这些学生姓名所组成的列表</h4><p>分析：学生姓名所组成的列表和原列表（学生列表）是不同的，是一个全新的列表，所以这里选用 <code>map</code></p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> nameList <span class="token operator">=</span> l<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
nameList<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span> Shaw<span class="token punctuation">,</span> Yison<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>map</code> 是对集合中的每个元素应用一个函数，返回应用后的元素所组成的集合，通常情况下，map所返回的集合和原集合是是不同类型的集合，也就是一个全新的集合。</p><h4 id="场景二-我们要得到所有性别是男-m-的学生所组成的列表" tabindex="-1"><a class="header-anchor" href="#场景二-我们要得到所有性别是男-m-的学生所组成的列表" aria-hidden="true">#</a> 场景二：我们要得到所有性别是男（m）的学生所组成的列表</h4><p>分析：得到的列表还是学生列表，并且该列表是原列表的子集，因为有一个附加条件：男性学生，所以这里选用 <code>filter</code></p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> maleList <span class="token operator">=</span> l<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>sex <span class="token operator">==</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span>
maleList<span class="token operator">:</span> List<span class="token punctuation">[</span>Student<span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> Student<span class="token punctuation">(</span>Shaw<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>filter</code> 一般用于移除集合中不满足条件的元素，返回满足条件的元素所组成的集合。 当然，这里用 <code>collect</code> 也可以解决问题：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> maleList <span class="token operator">=</span> l<span class="token punctuation">.</span>collect<span class="token punctuation">{</span><span class="token keyword">case</span> s <span class="token keyword">if</span> s<span class="token punctuation">.</span>sex <span class="token operator">==</span> <span class="token string">&quot;m&quot;</span> <span class="token keyword">=&gt;</span> s<span class="token punctuation">}</span>
maleList<span class="token operator">:</span> List<span class="token punctuation">[</span>Student<span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> Student<span class="token punctuation">(</span>Shaw<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是对比一下，可以发现filter更加简洁。</p><h4 id="场景三-我们要得到男学生姓名所组成的列表" tabindex="-1"><a class="header-anchor" href="#场景三-我们要得到男学生姓名所组成的列表" aria-hidden="true">#</a> 场景三： 我们要得到男学生姓名所组成的列表</h4><p>分析：要得到男学生姓名，我们首先要得到男学生，然后再去获取这些学生的姓名，所以我们很容易采用：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> maleNameList <span class="token operator">=</span> l<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>sex <span class="token operator">==</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
maleNameList<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span> Shaw<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是通过我们在之前<code>各集合操作之间的比较</code>中所得出的结论，由于男学生姓名列表是一个和原列表（学生列表）完全不同的，并且该列表是学生姓名列表的子集，所以我们可以采用 <code>collect</code>：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> maleNameList <span class="token operator">=</span> l<span class="token punctuation">.</span>collect<span class="token punctuation">{</span><span class="token keyword">case</span> s <span class="token keyword">if</span> s<span class="token punctuation">.</span>sex <span class="token operator">==</span> <span class="token string">&quot;m&quot;</span> <span class="token keyword">=&gt;</span> s<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
maleNameList<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span> Shaw<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的结果和上面操作的结果一样。</p><p><code>collect</code> 接受的是一个偏函数，对集合中每个元素应用该函数，返回应用后的元素所组成的列表，可以将 <code>collect</code> 看作是先做 <code>filter</code> 操作再做 <code>map</code> 操作：</p><p>场景二中的 <code>collect</code> 操作可以看作是：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code>l<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>sex <span class="token operator">==</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>s <span class="token keyword">=&gt;</span> s<span class="token punctuation">)</span>
List<span class="token punctuation">[</span>Student<span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> Student<span class="token punctuation">(</span>Shaw<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他常用方法" tabindex="-1"><a class="header-anchor" href="#其他常用方法" aria-hidden="true">#</a> 其他常用方法</h3><h4 id="场景四-现在我们要得到每个学生在列表中的位置以方便给他们编号" tabindex="-1"><a class="header-anchor" href="#场景四-现在我们要得到每个学生在列表中的位置以方便给他们编号" aria-hidden="true">#</a> 场景四：现在我们要得到每个学生在列表中的位置以方便给他们编号</h4><p>分析：我们可以采用 <code>学生 -&gt; 编号</code> 的形式来组织学生与编号之前的关系，这里我们可以采用 <code>zipWithIndex</code>：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code>l<span class="token punctuation">.</span>zipWithIndex
List<span class="token punctuation">[</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Shaw<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Yison<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>zipWithIndex</code> 将可以将集合内的元素与该元素在集合中的位置组合在一起，其实就是将集合内的元素与该元素的位置组成了一个元组，元组的第二个值是元素在集合中所处的位置。</p><h4 id="场景五-现在要将男学生和女学生分组-男学生组成一个集合-女学生组成一个集合" tabindex="-1"><a class="header-anchor" href="#场景五-现在要将男学生和女学生分组-男学生组成一个集合-女学生组成一个集合" aria-hidden="true">#</a> 场景五：现在要将男学生和女学生分组，男学生组成一个集合，女学生组成一个集合</h4><p>分析：根据场景的描述，新集合内的元素应该是：<code>sex -&gt; List[Student]</code>的形式，这里我们可以采用：<code>groupBy</code>：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> group <span class="token operator">=</span> l<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>sex<span class="token punctuation">)</span>
group<span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span>List<span class="token punctuation">[</span>Student<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Map<span class="token punctuation">(</span>m <span class="token operator">-&gt;</span> List<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Jilen<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> Student<span class="token punctuation">(</span>Shaw<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f <span class="token operator">-&gt;</span> List<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>Yison<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>groupBy</code> 就是对集合按照特定的要求进行分组，返回一个 <code>Map</code>类型。</p><h2 id="延伸阅读" tabindex="-1"><a class="header-anchor" href="#延伸阅读" aria-hidden="true">#</a> 延伸阅读</h2>`,80),m={href:"https://pavelfatin.com/scala-collections-tips-and-tricks/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://twitter.github.io/scala_school/zh_cn/collections.html",target:"_blank",rel:"noopener noreferrer"};function v(h,g){const s=e("ExternalLinkIcon");return o(),c("div",null,[d,n("p",null,[n("a",m,[a("Scala Collections Tips and Tricks"),t(s)])]),n("p",null,[n("a",b,[a("集合"),t(s)])])])}const S=p(r,[["render",v],["__file","how-to-Handle-collection-in-scala.html.vue"]]);export{S as default};
